# Cargamos la data del Python:
# X_train_num =
read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
# X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
# X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
# X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
# y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
# y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
# Cargamos la data del Python:
X_train_num = read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
# X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
# X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
# X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
# y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
# y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
head(X_train_num)
rm(list = ls())
# Librerias a usar ...
library(woeBinning) # Bivariados
library(funModeling) # Status
library(MASS) # Stepwise
library(Hmisc) # Gini
library(survey) # Wald variable
library(aod) # Prueba Wald modelo
library(ResourceSelection) # Prueba Hosmer Lemeshow
library(dplyr) # Frecuencia de categoricas en el manual
require(tcltk) # Mensaje de alerta de finalizacion de procesos
#################################
####        Funciones        ####
#################################
# Función para análisis de Selección de variables:
model_wald<-function(model,df,r=NULL){
a=rownames(summary(model)$coefficients[,c(1,4)])
b=a[2:length(a)]
c=data.frame(t(rep(NA,length(a)-1)))
colnames(c)<-b;rownames(c)<-c("(Intercept)")
d=rbind(c,cor(df[,b]))
e=vector()
for(i in b){e[i]=as.vector(regTermTest(model,test.terms=i, method="Wald")[3][[1]])}
f=rbind(c(NA),as.data.frame(e))
f=round(f[,1]*100/sum(f[,1],na.rm=T),2);f=as.data.frame(f)
rownames(f)<-a
j=summary(model)$coefficients[,c(1,4)][,2]
k=vector()
for(i in 1:length(j)){
if(j[i]>0.100){k[i]=c(NA)}else{
if(j[i]>0.050){k[i]=c('.')}else{
if(j[i]>0.010){k[i]=c('*')}else{
if(j[i]>0.001){k[i]=c('**')}else{k[i]=c('***')}}}}
}
k=as.data.frame(k)
rownames(k)<-a
g=cbind(summary(model)$coefficients[,c(1,4)],k,f,d)
h=colnames(g)
h=replace(h,h=="Estimate","Coeficientes")
h=replace(h,h=="Pr(>|z|)","P-value")
h=replace(h,h=="f","Wald")
h=replace(h,h=="k","ptj")
colnames(g)<-h
if(is.null(r)){g[,1:4]}
else{if(r=="cor"){g}else{g[,1:4]}}
}
#   TablaWoe( name, df, class_var, bin )
##  Descripcion
# Nombre de la variable
# Data frame
# Tipo de variable
# Cortes sugeridos para la variable
# Etiqueta para los cortes sugeridos
### Return list(t, IV_final)
# Tabla Woe
# IV total sin contar inconsistentes
TablaWoe = function(name, df, class_var = NULL, bin = NULL) {
# Declaracion de variables
df = df[c(name, 'malo')]
# Etiquetas cuando hay cortes especificos
a = NULL
BinsUnicos = NULL
# Definimos el tipo de variable (T: factor & F: numeric)
if ( !is.null(class_var) ) {
if (class_var == 'numeric') {
class_var = F # Numerico
} else {
class_var = T # Factor
}
} else {
if (class(df[, name]) != 'numeric') {
class_var = T # Factor
} else {
class_var = F # Numerico
}
}
# Existen NA
numNa = ( length( which( is.na(df[, name]) ) ) + 0 )
# Cortes unicos de los veintiles
if (class_var != T) {
BinsUnicos = unique( quantile( df[, name],
probs = seq(0.05, 0.95, 0.05),
na.rm = T ))
}
# Agrupamiento de la Variable
# si la variable es numerica
if (class_var != T) {
# Dividimos la variable
if (!is.null(bin)){
# si existe division
w = cut(df[, name], breaks = c(-Inf, bin, Inf))
df$x = as.character(w)
w = levels(w)
} else {
# Division por defecto
w = cut(df[, name], breaks = c(-Inf, BinsUnicos, Inf))
df$x = as.character(w)
w = levels(w)
}
if (numNa > 0) {
df$x[is.na(df$x)] = 'Otros / Null / NA'
w = c(w,'Otros / Null / NA')
}
}
# si la variable es categorica
if ( class_var == T ) {
if ( !is.null(bin) ) {
# convertimos a caracter
df$x = as.character(df[, name])
# Niveles de la variable
b = unique(df[, name])
# Cambio a etiqueta bin
for (i in 1:length(bin)) {
df$x = replace(df$x,
df$x %in% bin[[i]],
LETTERS[i])
if ( !is.null(b) ) {
b = setdiff(b, bin[[i]])
}
}
if ( length(b) != 0 ) {
df$x = replace(df$x,
df$x %in% b,
'Otros / Null / NA')
}
# Cambiamos etiquetas de los cortes para categoricos
for ( i in 1:length(bin) ) {
if ( length(bin[[i]]) == 1 ) {
a[i] = bin[[i]]
} else {
a[i] = bin[[i]][1]
for (j in 2:length( bin[[i]] ) ) {
a[i] = paste(a[i],bin[[i]][j],sep=", ")
}
}
}
if ( length(b) != 0 ) {
a[ length(bin) + 1 ] = 'Otros / Null / NA'
}
} else {
# Cambio a caracter si es categorico
df$x = as.character(df[, name])
}
if (numNa > 0) {
df$x[is.na(df$x)] = 'Otros / Null / NA'
}
}
# transformacion de la variable categorica a factor
df[c('x')] = as.factor(df[, c('x')])
# Si es numerica, cambiamos los niveles
if (class_var != T) {
levels(df$x) = w
}
# Tabla
t = as.data.frame.array(table( df[c('x', 'malo')], useNA = "ifany"))
# Cambiamos etiquetas de los cortes para categoricos
if (class_var == T) {
if (!is.null(bin)) {
if (numNa > 0) {
l = unique( df[ which( is.na(df[, name]) ), ]$x )
if ( !l %in% LETTERS ) {
rownames(t) = c(a, 'Otros / Null / NA')
}
} else {
rownames(t) = a
}
}
}
# Cabeceras Buenos y Malos
colnames(t) = c('Buenos','Malos')
# Columnas:
t['Total'] = t$Buenos + t$Malos
t['TM'] = t$Malos/t$Total
t['Mat'] = t$Total/dim(df)[1]
t['DistBuenos'] = t$Buenos/sum(t$Buenos)
t['DistMalos'] = t$Malos/sum(t$Malos)
t['WOE'] = log(t$DistBuenos/t$DistMalos)
t['IV'] = (t$DistBuenos - t$DistMalos) * t$WOE
# IV total
IV_final = sum(t$IV[abs(t$IV)!=Inf],na.rm = TRUE)
# Total
t = rbind(t, Total = c(sum(t$Buenos), sum(t$Malos), sum(t$Total), sum(t$Malos)/sum(t$Total),
NA, NA, NA, NA, IV_final))
# Redondeo a 2 decimales
t$TM = round(t$TM*100, 1)
t$Mat = round(t$Mat*100, 1)
t$DistBuenos = round(t$DistBuenos*100, 1)
t$DistMalos = round(t$DistMalos*100, 1)
t$WOE = round(t$WOE, 4)
t$IV = round(t$IV*100, 2)
# Lista a retornar
if (class_var == T) {
lista = list(t, IV_final)
} else {
lista = list(t, IV_final, BinsUnicos)
}
return(lista)
}
#   AnalisisWoe( name, dfs, ClsVar, bin )
##  Descripcion
# Nombre de la variable
# Lista de Data frames
# Tipo de variable
# Cortes sugeridos para la variable
### Return list(t, IV_final, BinsUnicos)
# Tabla Woe
# IV total sin contar inconsistentes
# Cortes únicos cuando son numericos
AnalisisWoe = function(name, dfs, ClsVar, bin = NULL) {
# Imprimimos el nombre de la variable
# writeLines(paste(name,':\n',sep = ""))
if ( length(dfs) == 1 ) {
if ( is.null(bin) ) {
r1 = TablaWoe(name, dfs[[1]], ClsVar, bin)
# Cortes cuantiles por defecto
if ( ClsVar == 'numeric' ) {
Quantiles = paste( 'c(',round(r1[[3]][1], 6),sep="")
if ( length( r1[[3]] ) == 1 ) {
Quantiles = paste( Quantiles, ')',sep="")
} else {
for (i in 2:length( r1[[3]] ) ) {
Quantiles = paste( Quantiles, round(r1[[3]][i], 6), sep=", ")
}
Quantiles = paste( Quantiles, ')',sep="")
}
#Salida
list(name = name,
TablaOriginalTrain = r1[[1]],
IVfinalOriginalTrain = r1[[2]],
Quantiles = Quantiles)
} else {
#Salida
list(name = name,
TablaOriginalTrain = r1[[1]],
IVfinalOriginalTrain = r1[[2]])
}
} else {
r1 = TablaWoe(name, dfs[[1]], ClsVar)
r2 = TablaWoe(name, dfs[[1]], ClsVar, bin)
#Salida
list(name = name,
TablaOriginal = r1[[1]],
IVfinalOriginal = r1[[2]],
TablaNueva = r2[[1]],
IVfinalNuevo = r2[[2]])
}
} else {
if ( is.null(bin) ) {
r1 = TablaWoe(name, dfs[[1]])
if (is.null(ClsVar) || ClsVar == 'numeric'){
r2 = TablaWoe(name, dfs[[2]], ClsVar, r1[[3]])
} else {
r2 = TablaWoe(name, dfs[[2]], ClsVar)
}
# Cortes cuantiles por defecto
if ( ClsVar == 'numeric' ) {
Quantiles = paste( 'c(',round(r1[[3]][1], 6),sep="")
if ( length( r1[[3]] ) == 1 ) {
Quantiles = paste( Quantiles, ')',sep="")
} else {
for (i in 2:length( r1[[3]] ) ) {
Quantiles = paste( Quantiles, round(r1[[3]][i], 6), sep=", ")
}
Quantiles = paste( Quantiles, ')',sep="")
}
#Salida
list(name = name,
TablaOriginalTrain = r1[[1]],
IVfinalOriginalTrain = r1[[2]],
TablaOriginalTest = r2[[1]],
IVfinalOriginalTest = r2[[2]],
Quantiles = Quantiles)
} else {
#Salida
list(name = name,
TablaOriginalTrain = r1[[1]],
IVfinalOriginalTrain = r1[[2]],
TablaOriginalTest = r2[[1]],
IVfinalOriginalTest = r2[[2]])
}
} else {
r1 = TablaWoe(name, dfs[[1]])
r2 = TablaWoe(name, dfs[[1]], ClsVar, bin)
r3 = TablaWoe(name, dfs[[2]], ClsVar, bin)
#Salida
list(name = name,
TablaOriginalTrain = r1[[1]],
IVfinalOriginalTrain = r1[[2]],
TablaNuevaTrain = r2[[1]],
IVfinalNuevoTrain = r2[[2]],
TablaNuevaTest = r3[[1]],
IVfinalNuevoTest = r3[[2]])
}
}
}
# biv_iv (biv, tb)
## Descripcion
# Lista de vector de nombre de variable, iv's train y iv's tes.
# Tabla de analisis de woe
### Return biv
# Lista de vectores
biv_iv = function(biv,tb){
biv$name = unique( append(biv$name, tb$name) )
biv$iv_tr = append(biv$iv_tr, tb$IVfinalNuevoTrain)
biv$iv_ts = append(biv$iv_ts, tb$IVfinalNuevoTest)
k = length( biv$name )
if (k == 1) {
biv$iv_tr = biv$iv_tr[ length(biv$iv_tr) ]
biv$iv_ts = biv$iv_ts[ length(biv$iv_ts) ]
} else {
biv$iv_tr = c( biv$iv_tr[1:(k-1)], biv$iv_tr[ length(biv$iv_tr) ])
biv$iv_ts = c( biv$iv_ts[1:(k-1)], biv$iv_ts[ length(biv$iv_ts) ])
}
return(biv)
}
# Manual
## Numericas
### variable, titulo y color del histograma
manual_numeric = function(var, title, color,dec = 0){
df_manual = as.data.frame(
cbind(
Estadisticos = var,
Min = round( min( data_train[, var], na.rm = T ), dec ),
Max = round( max( data_train[, var], na.rm = T ), dec ),
Media = round( mean( data_train[, var], na.rm = T ), dec ),
Mediana = round( median( data_train[, var], na.rm = T ), dec ),
Desv.Est = round( sd( data_train[, var], na.rm = T ), dec )
)
)
hst = hist(data_train[,var], main=title, col = color)
return(list(df_manual, hst))
}
## Categoricas
manual_categorica = function(var,bin){
x = as.character( data_train[, var] )
for (i in 1:length(bin)) {
r = length( bin[[i]] )
t = bin[[i]][1]
if ( r != 1 ) { for ( j in 2:r ) { t = paste(t, bin[[i]][j], sep = ', ') } }
if ( r == 1 ) { x = replace(x, x %in% bin[[i]], bin[[i]] ) } else { x = replace(x, x %in% bin[[i]], t ) }
}
df = as.data.frame( cbind( table(x), prop.table( table(x) ) ) )
colnames(df)<-c('Recuento','Proporcion')
return(df)
}
# Comvertir segundos a tiempo en horas, minutos y segundos.
seg_to_time = function(t) {
seg = t %% 60
t = (t - seg) / 60
min = t %% 60
hrs = (t - min) / 60
txt = paste(hrs,'hrs',min,'min',seg,'seg')
return (txt)
}
# Calculo del timepo de un sript
# time_process = function(nameProcess, script){
time_process = function(nameProcess, start_time){
# # Incio del proceso
# start_time = Sys.time()
#
# # Script a ejecutar
# eval( parse( text = script ) )
#
# # Fin del proceso
# end_time = Sys.time()
# Tiempo empleado
# range_time = seg_to_time( round( as.numeric(end_time) -  as.numeric(start_time)) )
range_time = seg_to_time( round( as.numeric(Sys.time()) -  start_time) )
texto = paste("Complete in ",range_time,"!",sep = '')
# Mensaje de alerta
msgBox = tkmessageBox(title = nameProcess, message = texto, icon = "info", type = "ok")
}
###############################
######      Inicio        #####
###############################
start_time = as.numeric(Sys.time())
data = read.table(file.choose(), header = T, sep = ',') # D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\bases\construccion\base.csv
time_process('carga de Datos', start_time)
writeLines("Dimensiones:")
dim(data)
colnames(data)[1:15]
writeLines("Presentacion:\n")
as.matrix(data)[1:2,1:9]
############## ANALISIS DE VARIABLES - CONTEO 0 NA INF
data_sts=df_status(data)
write.table(data_sts,paste(readline(),"data_sts.csv",sep="\\"), sep=',')
colnames(data)[1:15]
colnames(data)[1:15]
# Cargamos la data del Python:
X_train_num = read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
# X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
# X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
# X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
# y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
# y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
head(X_train_num)
# X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
# X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
# X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
# y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
# y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
X_train_num$X
rownames(X_train_num)
# Cargamos la data del Python:
X_train_num = read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
# X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
# X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
# X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
# y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
# y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
rownames(X_train_num) = X_train_num$X
X_train_num$X = NULL
head(X_train_num)
# Cargamos la data del Python:
X_train_num = read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
head(y_train)
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
"X" in rownames(y_train)
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
"X" %in% rownames(y_train)
# head(y_train)
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
c("X") %in% rownames(y_train)
# head(y_train)
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
# c("X") %in%
rownames(y_train)
# head(y_train)
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
# c("X") %in%
colnames(y_train)
# head(y_train)
# rownames(X_train_num) = X_train_num$X
# X_train_num$X = NULL
c("X") %in% colnames(y_train)
# head(y_train)
train_test = list( X_train_num, X_train_cat, X_test_num, X_test_cat, y_train, y_test)
for (i in train_test){ if (c("X") %in% colnames(i)) { rownames(i) = i$X; i$X = NULL } }
head(X_train_num, 2)
# Cargamos la data del Python:
X_train_num = read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
train_test = list( X_train_num, X_train_cat, X_test_num, X_test_cat, y_train, y_test)
# for (i in train_test){ if (c("X") %in% colnames(i)) { rownames(i) = i$X; i$X = NULL } }
for (i in 1:len(train_test)){ if (c("X") %in% colnames(train_test[i])) { rownames(train_test[i]) = train_test[i]$X; train_test[i]$X = NULL } }
train_test = list( X_train_num, X_train_cat, X_test_num, X_test_cat, y_train, y_test)
# for (i in train_test){ if (c("X") %in% colnames(i)) { rownames(i) = i$X; i$X = NULL } }
for (i in 1:lenght(train_test)){ if (c("X") %in% colnames(train_test[i])) { rownames(train_test[i]) = train_test[i]$X; train_test[i]$X = NULL } }
train_test = list( X_train_num, X_train_cat, X_test_num, X_test_cat, y_train, y_test)
# for (i in train_test){ if (c("X") %in% colnames(i)) { rownames(i) = i$X; i$X = NULL } }
for (i in 1:length(train_test)){ if (c("X") %in% colnames(train_test[i])) { rownames(train_test[i]) = train_test[i]$X; train_test[i]$X = NULL } }
head(X_train_num, 2)
rownames(X_train_num) = X_train_num$X
X_train_num$X = NULL
rownames(X_train_cat) = X_train_cat$X
X_train_cat$X = NULL
rownames(X_test_num) = X_test_num$X
X_test_num$X = NULL
rownames(X_test_cat) = X_test_cat$X
X_test_cat$X = NULL
rownames(y_train) = y_train$X
y_train$X = NULL
rownames(y_test) = y_test$X
y_test$X = NULL
head(X_train_num, 2)
head(X_train_cat, 2)
head(X_test_num, 2)
head(X_test?cat, 2)
head(X_test_cat, 2)
head(y_train, 2)
y_train
y_train[1]
y_train[malos]
y_train['malos']
y_train[:1]
y_train[1:1]
y_train[:,1]
y_train[,1]
y_train[,1][1:25]
y_test[,1][1:25]
