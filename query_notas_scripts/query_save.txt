
```{r}
rm(list = ls())
```

```{r}
# Librerias a usar ...

library(woeBinning) # Bivariados
library(funModeling) # Status
library(MASS) # Stepwise
library(Hmisc) # Gini
library(survey) # Wald variable
library(aod) # Prueba Wald modelo
library(ResourceSelection) # Prueba Hosmer Lemeshow
library(dplyr) # Frecuencia de categoricas en el manual
require(tcltk) # Mensaje de alerta de finalizacion de procesos

```

```{r}
#################################
####        Funciones        ####
#################################

# Función para análisis de Selección de variables:
model_wald<-function(model,df,r=NULL){
    a=rownames(summary(model)$coefficients[,c(1,4)])
    b=a[2:length(a)]
    c=data.frame(t(rep(NA,length(a)-1)))
    colnames(c)<-b;rownames(c)<-c("(Intercept)")
    d=rbind(c,cor(df[,b]))
    e=vector()
    for(i in b){e[i]=as.vector(regTermTest(model,test.terms=i, method="Wald")[3][[1]])}
    f=rbind(c(NA),as.data.frame(e))
    f=round(f[,1]*100/sum(f[,1],na.rm=T),2);f=as.data.frame(f)
    rownames(f)<-a
    
    j=summary(model)$coefficients[,c(1,4)][,2]
    k=vector()
    for(i in 1:length(j)){
                if(j[i]>0.100){k[i]=c(NA)}else{
                if(j[i]>0.050){k[i]=c('.')}else{
                if(j[i]>0.010){k[i]=c('*')}else{
                if(j[i]>0.001){k[i]=c('**')}else{k[i]=c('***')}}}}
    }
    k=as.data.frame(k)
    rownames(k)<-a
    g=cbind(summary(model)$coefficients[,c(1,4)],k,f,d)
    h=colnames(g)
    h=replace(h,h=="Estimate","Coeficientes")
    h=replace(h,h=="Pr(>|z|)","P-value")
    h=replace(h,h=="f","Wald")
    h=replace(h,h=="k","ptj")
    colnames(g)<-h
    if(is.null(r)){g[,1:4]}
    else{if(r=="cor"){g}else{g[,1:4]}}
}


#   TablaWoe( name, df, class_var, bin )
##  Descripcion
    # Nombre de la variable
    # Data frame
    # Tipo de variable
    # Cortes sugeridos para la variable
    # Etiqueta para los cortes sugeridos
### Return list(t, IV_final)
    # Tabla Woe
    # IV total sin contar inconsistentes

TablaWoe = function(name, df, class_var = NULL, bin = NULL) {
    
    # Declaracion de variables
    df = df[c(name, 'malo')]
    
    
    # Etiquetas cuando hay cortes especificos
    a = NULL
    BinsUnicos = NULL
    
    
    # Definimos el tipo de variable (T: factor & F: numeric)
    if ( !is.null(class_var) ) {
        
        if (class_var == 'numeric') {
            
            class_var = F # Numerico
            
        } else {
            
            class_var = T # Factor
            
        }
        
    } else {
        
        if (class(df[, name]) != 'numeric') {
            
            class_var = T # Factor
            
        } else { 
            
            class_var = F # Numerico
            
        }
        
    }
    
    
    # Existen NA
    numNa = ( length( which( is.na(df[, name]) ) ) + 0 )
    
    
    # Cortes unicos de los veintiles
    if (class_var != T) {
        
        BinsUnicos = unique( quantile( df[, name], 
                            probs = seq(0.05, 0.95, 0.05), 
                                    na.rm = T ))
        
    }
    
    
    # Agrupamiento de la Variable
    
    # si la variable es numerica 
    if (class_var != T) {
        
        # Dividimos la variable
        if (!is.null(bin)){
            
            # si existe division
            w = cut(df[, name], breaks = c(-Inf, bin, Inf))
            df$x = as.character(w)
            w = levels(w)
            
        } else {
            
            # Division por defecto
            w = cut(df[, name], breaks = c(-Inf, BinsUnicos, Inf))
            df$x = as.character(w)
            w = levels(w)
            
        }
        
        if (numNa > 0) {
            
            df$x[is.na(df$x)] = 'Otros / Null / NA'
            w = c(w,'Otros / Null / NA')
            
        }
    
    }
    
    
    # si la variable es categorica
    if ( class_var == T ) {
        
        if ( !is.null(bin) ) {
            
            # convertimos a caracter
            df$x = as.character(df[, name])
            
            
            # Niveles de la variable
            b = unique(df[, name])
            
            
            # Cambio a etiqueta bin
            for (i in 1:length(bin)) {
                
                df$x = replace(df$x, 
                            df$x %in% bin[[i]], 
                                LETTERS[i])
                
                if ( !is.null(b) ) {
                    
                    b = setdiff(b, bin[[i]])
                
                }
            }
    
            if ( length(b) != 0 ) {
                
                df$x = replace(df$x,
                               df$x %in% b,
                               'Otros / Null / NA')
                
            }
    
    
            # Cambiamos etiquetas de los cortes para categoricos
            for ( i in 1:length(bin) ) {
                
                if ( length(bin[[i]]) == 1 ) {
            
                    a[i] = bin[[i]]
            
                } else {
            
                    a[i] = bin[[i]][1]
            
                    for (j in 2:length( bin[[i]] ) ) {
                        
                        a[i] = paste(a[i],bin[[i]][j],sep=", ")
                        
                    }
                    
                }
                
            }
            
            if ( length(b) != 0 ) {
                
                a[ length(bin) + 1 ] = 'Otros / Null / NA'
                
            }
        
        } else {
            
            # Cambio a caracter si es categorico
            df$x = as.character(df[, name])
            
        }
        
        if (numNa > 0) {
            
            df$x[is.na(df$x)] = 'Otros / Null / NA'
            
        }
    
    }
    
    
    # transformacion de la variable categorica a factor
    df[c('x')] = as.factor(df[, c('x')])
    
    
    # Si es numerica, cambiamos los niveles
    if (class_var != T) {
        
        levels(df$x) = w
        
    }
    
    # Tabla
    t = as.data.frame.array(table( df[c('x', 'malo')], useNA = "ifany"))
    
    
    # Cambiamos etiquetas de los cortes para categoricos
    if (class_var == T) {
        
        if (!is.null(bin)) {
            
            if (numNa > 0) {
                
                l = unique( df[ which( is.na(df[, name]) ), ]$x )
                
                if ( !l %in% LETTERS ) {
                    
                    rownames(t) = c(a, 'Otros / Null / NA')
                    
                }
                
            } else {
                
                rownames(t) = a
                
            }
    
        }
    
    }
    
    
    # Cabeceras Buenos y Malos
    colnames(t) = c('Buenos','Malos')
    
    
    # Columnas:
    t['Total'] = t$Buenos + t$Malos
    t['TM'] = t$Malos/t$Total
    t['Mat'] = t$Total/dim(df)[1]
    t['DistBuenos'] = t$Buenos/sum(t$Buenos)
    t['DistMalos'] = t$Malos/sum(t$Malos)
    t['WOE'] = log(t$DistBuenos/t$DistMalos)
    t['IV'] = (t$DistBuenos - t$DistMalos) * t$WOE
    
    # IV total
    IV_final = sum(t$IV[abs(t$IV)!=Inf],na.rm = TRUE)
    
    # Total
    t = rbind(t, Total = c(sum(t$Buenos), sum(t$Malos), sum(t$Total), sum(t$Malos)/sum(t$Total), 
                           NA, NA, NA, NA, IV_final))
    
    # Redondeo a 2 decimales
    t$TM = round(t$TM*100, 1)
    t$Mat = round(t$Mat*100, 1)
    t$DistBuenos = round(t$DistBuenos*100, 1)
    t$DistMalos = round(t$DistMalos*100, 1)
    t$WOE = round(t$WOE, 4)
    t$IV = round(t$IV*100, 2)
    
    
    # Lista a retornar
    if (class_var == T) {
        
        lista = list(t, IV_final)
        
    } else {
        
        lista = list(t, IV_final, BinsUnicos)
        
    }
     
    
    return(lista)
    
}


#   AnalisisWoe( name, dfs, ClsVar, bin )
##  Descripcion
    # Nombre de la variable
    # Lista de Data frames
    # Tipo de variable
    # Cortes sugeridos para la variable
### Return list(t, IV_final, BinsUnicos)
    # Tabla Woe
    # IV total sin contar inconsistentes
    # Cortes únicos cuando son numericos

AnalisisWoe = function(name, dfs, ClsVar, bin = NULL) {
    
    # Imprimimos el nombre de la variable
    # writeLines(paste(name,':\n',sep = ""))
    
    
    if ( length(dfs) == 1 ) {
        
        if ( is.null(bin) ) {
            
            r1 = TablaWoe(name, dfs[[1]], ClsVar, bin)
            
            # Cortes cuantiles por defecto
            if ( ClsVar == 'numeric' ) {
                
                Quantiles = paste( 'c(',round(r1[[3]][1], 6),sep="")
                
                if ( length( r1[[3]] ) == 1 ) {
                    
                    Quantiles = paste( Quantiles, ')',sep="")
                    
                } else {
                    
                    for (i in 2:length( r1[[3]] ) ) {
                            
                        Quantiles = paste( Quantiles, round(r1[[3]][i], 6), sep=", ")
                            
                    }
                    
                    Quantiles = paste( Quantiles, ')',sep="")
                    
                }
                
                #Salida
                list(name = name,
                     TablaOriginalTrain = r1[[1]], 
                        IVfinalOriginalTrain = r1[[2]],
                        Quantiles = Quantiles)
            
            } else {
                
                #Salida
                list(name = name,
                     TablaOriginalTrain = r1[[1]], 
                        IVfinalOriginalTrain = r1[[2]])
                
            }
            
        } else {
            
            r1 = TablaWoe(name, dfs[[1]], ClsVar)
            r2 = TablaWoe(name, dfs[[1]], ClsVar, bin)
            #Salida
            list(name = name,
                 TablaOriginal = r1[[1]], 
                    IVfinalOriginal = r1[[2]], 
                 TablaNueva = r2[[1]], 
                    IVfinalNuevo = r2[[2]])
            
        }
        
    } else {
        
        if ( is.null(bin) ) {
            
            r1 = TablaWoe(name, dfs[[1]])

            if (is.null(ClsVar) || ClsVar == 'numeric'){
                
                r2 = TablaWoe(name, dfs[[2]], ClsVar, r1[[3]])
                
            } else {
                
                r2 = TablaWoe(name, dfs[[2]], ClsVar)
                
            }
            
            # Cortes cuantiles por defecto
            if ( ClsVar == 'numeric' ) {
                
                Quantiles = paste( 'c(',round(r1[[3]][1], 6),sep="")
                
                if ( length( r1[[3]] ) == 1 ) {
                    
                    Quantiles = paste( Quantiles, ')',sep="")
                    
                } else {
                    
                    for (i in 2:length( r1[[3]] ) ) {
                            
                        Quantiles = paste( Quantiles, round(r1[[3]][i], 6), sep=", ")
                            
                    }
                    
                    Quantiles = paste( Quantiles, ')',sep="")
                    
                }
                
                
                #Salida
                list(name = name,
                     TablaOriginalTrain = r1[[1]], 
                        IVfinalOriginalTrain = r1[[2]], 
                     TablaOriginalTest = r2[[1]], 
                        IVfinalOriginalTest = r2[[2]],
                        Quantiles = Quantiles)
                
            } else {
                
                #Salida
                list(name = name,
                     TablaOriginalTrain = r1[[1]], 
                        IVfinalOriginalTrain = r1[[2]], 
                     TablaOriginalTest = r2[[1]], 
                        IVfinalOriginalTest = r2[[2]])
                
            }
            
        } else {
            
            r1 = TablaWoe(name, dfs[[1]])
            r2 = TablaWoe(name, dfs[[1]], ClsVar, bin)
            r3 = TablaWoe(name, dfs[[2]], ClsVar, bin)
            #Salida
            list(name = name,
                 TablaOriginalTrain = r1[[1]], 
                    IVfinalOriginalTrain = r1[[2]], 
                 TablaNuevaTrain = r2[[1]], 
                    IVfinalNuevoTrain = r2[[2]], 
                 TablaNuevaTest = r3[[1]], 
                    IVfinalNuevoTest = r3[[2]])
            
        }
        
    }
    
}

# biv_iv (biv, tb)
## Descripcion
  # Lista de vector de nombre de variable, iv's train y iv's tes.
  # Tabla de analisis de woe
### Return biv
  # Lista de vectores

biv_iv = function(biv,tb){
  biv$name = unique( append(biv$name, tb$name) )
  biv$iv_tr = append(biv$iv_tr, tb$IVfinalNuevoTrain)
  biv$iv_ts = append(biv$iv_ts, tb$IVfinalNuevoTest)
  
  k = length( biv$name )
  if (k == 1) {
    
    biv$iv_tr = biv$iv_tr[ length(biv$iv_tr) ]
    biv$iv_ts = biv$iv_ts[ length(biv$iv_ts) ]
    
  } else {
    
    biv$iv_tr = c( biv$iv_tr[1:(k-1)], biv$iv_tr[ length(biv$iv_tr) ])
    biv$iv_ts = c( biv$iv_ts[1:(k-1)], biv$iv_ts[ length(biv$iv_ts) ])
    
  } 
  
  return(biv)
}

# Manual

## Numericas
### variable, titulo y color del histograma

manual_numeric = function(var, title, color,dec = 0){
  
  df_manual = as.data.frame( 
                cbind( 
                      Estadisticos = var,
                      Min = round( min( data_train[, var], na.rm = T ), dec ),
                      Max = round( max( data_train[, var], na.rm = T ), dec ),
                      Media = round( mean( data_train[, var], na.rm = T ), dec ),
                      Mediana = round( median( data_train[, var], na.rm = T ), dec ),
                      Desv.Est = round( sd( data_train[, var], na.rm = T ), dec ) 
                )
              )
  hst = hist(data_train[,var], main=title, col = color)
  return(list(df_manual, hst))
}

## Categoricas
manual_categorica = function(var,bin){
  
  x = as.character( data_train[, var] )
  for (i in 1:length(bin)) {
      
      r = length( bin[[i]] )
      t = bin[[i]][1]
    
      if ( r != 1 ) { for ( j in 2:r ) { t = paste(t, bin[[i]][j], sep = ', ') } }
      
      if ( r == 1 ) { x = replace(x, x %in% bin[[i]], bin[[i]] ) } else { x = replace(x, x %in% bin[[i]], t ) }
      
  }
  
  df = as.data.frame( cbind( table(x), prop.table( table(x) ) ) )
  colnames(df)<-c('Recuento','Proporcion')
  
  return(df)
  
}

# Comvertir segundos a tiempo en horas, minutos y segundos.
seg_to_time = function(t) {
  
  seg = t %% 60
  t = (t - seg) / 60
  min = t %% 60
  hrs = (t - min) / 60
  txt = paste(hrs,'hrs',min,'min',seg,'seg')

  return (txt)   
}

# Calculo del timepo de un sript
# time_process = function(nameProcess, script){
time_process = function(nameProcess, start_time){
  
  # # Incio del proceso
  # start_time = Sys.time()
  # 
  # # Script a ejecutar
  # eval( parse( text = script ) )
  # 
  # # Fin del proceso
  # end_time = Sys.time()
  
  # Tiempo empleado
  # range_time = seg_to_time( round( as.numeric(end_time) -  as.numeric(start_time)) )
  range_time = seg_to_time( round( as.numeric(Sys.time()) -  start_time) )
  texto = paste("Complete in ",range_time,"!",sep = '')
  
  # Mensaje de alerta
  msgBox = tkmessageBox(title = nameProcess, message = texto, icon = "info", type = "ok")
  
}

```

```{r}
###############################
######      Inicio        #####
###############################

start_time = as.numeric(Sys.time())

data = read.table(file.choose(), header = T, sep = ',') # D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\bases\construccion\base.csv

time_process('carga de Datos', start_time)

```

```{r}
writeLines("Dimensiones:")
dim(data)
```

```{r}
colnames(data)[1:15]
```

```{r}
writeLines("Presentacion:\n")
as.matrix(data)[1:2,1:9]
```

```{r}
# Si la data es exportada desde postgre (sin pasar por Alteryx)

# data[data=="NULL"]<-NA
# names <- c(11:371)
# data[,names] <- lapply(data[,names], as.character)
# data[,names] <- lapply(data[,names], as.numeric)
```

```{r}
# colnames(data)
# summary(data)
# str(data)
```

```{r}
data[, 'filtro'] = ifelse((data$indeterminado + data$insuficiente) == 0, 0, 1)
data[, 'tm'] = data$malo
data[, 'malo'] = as.factor(data$malo)
```

```{r}
# # Transformacion a numeric y character
# var = (11:371)
# 
# for (i in var) {
#   if ( class( data[, i] ) == 'factor') {
#     data[, i] = as.character(data[, i])
#   } else {
#       if ( class( data[, i] ) == 'integer' ) {
#         data[, i] = as.numeric(data[, i])
#       }
#   }
#   writeLines(class( data[, i] ))
# }
```

```{r}
writeClipboard(gsub("\\\\", "/", readClipboard()))
```

```{r}
############## ANALISIS DE VARIABLES - CONTEO 0 NA INF
data_sts=df_status(data)
write.table(data_sts,paste(readline(),"data_sts.csv",sep="\\"), sep=',')
```

```{r}
############## ANALISIS DE VARIABLES - ESTADISTICOS
data_anls=profiling_num(data)
write.table(data_anls,paste(readline(),"data_anls.csv",sep="\\"), sep=',')
```

```{r}
# Cargamos la data del Python:
X_train_num = read.csv("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_num.csv", header = T, sep = ',')
X_train_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_train_cat.csv", header = T, sep = ',')
X_test_num = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_num.csv", header = T, sep = ',')
X_test_cat = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/X_test_cat.csv", header = T, sep = ',')
y_train = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_train.csv", header = T, sep = ',')
y_test = read.table("D:/GIAP/Curvas_PE/Recolocado/calibracion/202108/Recolocado_ADM/bases/train_test/y_test.csv", header = T, sep = ',')
```

```{r}
rownames(X_train_num) = X_train_num$X
X_train_num$X = NULL

rownames(X_train_cat) = X_train_cat$X
X_train_cat$X = NULL

rownames(X_test_num) = X_test_num$X
X_test_num$X = NULL

rownames(X_test_cat) = X_test_cat$X
X_test_cat$X = NULL

rownames(y_train) = y_train$X
y_train$X = NULL

rownames(y_test) = y_test$X
y_test$X = NULL
```

```{r}
head(X_train_num, 2)
```

```{r}
head(X_train_cat, 2)
```

```{r}
dim(X_train_num)
```

```{r}
head(X_test_num, 2)
```

```{r}
head(X_test_cat, 2)
```

```{r}
dim(X_test_num)
```

```{r}
y_train[,1][1:25]
```

```{r}
y_test[,1][1:25]
```

```{r}
str(X_train_num)
```

```{r}
#################################
######      woeBinning      #####
#################################
```

```{r}
######  Tratamiento Numericas #####
```

```{r}
data = X_train_num

# var_num = c()
var_num = colnames(X_train_num)

# for (i in colnames(data)) 
#   { 
#     if ( sum( is.na( data[, colnames(data)[1]] ) ) <= dim(data)[1] ) 
#       {
#         var_num = append(var_num, i)
#       }
#   }

dim(X_train_num)
length(var_num)
```

```{r}
# Nulos (criterio 02)

n = length(var_num)
m = dim(data)[1]
data_na = data.frame("var" = 1:n)

for (i in 1:n) 
  {
    data_na[i, 'var'] = var_num[i]
    data_na[i, 'prc_na'] = length(which(is.na( data[, var_num[i]] )))/m
  }

# data_na[data_na[,'prc_na'] > 0.8,]
# data_na[order(data_na$prc_na),]

write.table(data_na,paste(readline(),"na_num.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

# https://rpubs.com/cghv94/operaciones-con-conjuntos

var_num = setdiff(var_num, as.character( data_na[data_na[, 'prc_na'] > 0.8, 'var'] ) )

length(var_num)
```

```{r}
# # filtro de variables character y numeric
# var_num = c()
# var_chr = c()
# 
# for (i  in var) {
#   if ( class( data[, i] ) == 'character'  ) { var_chr = append(var_chr, i) }
#   if ( class( data[, i] ) == 'numeric'  ) { var_num = append(var_num, i) }
# }
# 
# # var_num
# # var_chr
# 
# # write.table(data_wbng[data_wbng$var %in% var_chr,],paste(readline(),"chr.csv",sep="\\"), sep=',')

```

```{r}
# CV (criterio 03) # aplicado a variables numericas

n = length(var_num)
data_cv = data.frame("var" = 1:n)

for (i in 1:n) {
  data_cv[i, 'var'] = var_num[i]
  data_cv[i, 'cv'] = sd(data[, var_num[i]], na.rm=T) / mean(data[, var_num[i]], na.rm=T)
}

# data_cv[data_cv[, 'cv'] <= 0.2, 'var']
# data_cv[order(data_cv$cv),]

write.table(data_cv,paste(readline(),"cv_num.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

var_num = setdiff(var_num, as.character( data_cv[data_cv[, 'cv'] <= 0.2, 'var'] ) )

length(var_num)
```

```{r}
# IV (criterio 01)

# start_time = as.numeric(Sys.time())

data_woeBinning = woe.binning(cbind(data[, var_num], y_train), "malo", var_num, min.perc.total=0.05)

n = dim( data_woeBinning )[1]
data_wbng = data.frame( "var" = 1:n )

for (i in 1:n ) {

    data_wbng[i, 'var'] = data_woeBinning[,1][[i]]
    data_wbng[i, 'iv'] = data_woeBinning[,3][[i]]

}

# time_process('Lista de woeBinning', start_time)

write.table(data_wbng,paste(readline(),"data_wbng_num.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

# data_wbng = read.table(file.choose(), header = T, sep = ',')
# 
var_num = as.character(data_wbng[data_wbng[,'iv'] >= 0.02 & data_wbng[,'iv'] < 0.5,]$var)

length(var_num)
```

```{r warning = FALSE}
# Correlacion
n = length(var_num)
k = n * (n-1) / 2
data_cor = data.frame( "var" = 1:k )
r = 1


# start_time = as.numeric(Sys.time())

for (i in 1:(n-1)) {
  
  for (j in (i+1):n ) { 
    
    # https://fhernanb.github.io/Manual-de-R/correl.html
    # https://rpubs.com/osoramirez/111403
    
    x = data[, var_num[i]]
    y = data[, var_num[j]]
    
    data_cor[r, 'var'] = var_num[i]
    data_cor[r, 'var_2'] = var_num[j]
    data_cor[r, 'cor'] = round( cor(x, y, use='pairwise.complete.obs' ), 4 )
    
    r = r + 1
  }
  
}

# time_process('correlacion entre datos', start_time)

# round( cor( data[, 'por_vig_1m'], data[, 'rec_calificacion_0_1m12'], use='pairwise.complete.obs' ), 4 )

write.table(data_cor,paste(readline(),"cor_num.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

var_num = setdiff(var_num, unique( data_cor[abs( data_cor[, 'cor'] ) >= 0.6, 'var_2'] ) )

length(var_num)
```

```{r}
var_num
```

```{r}
######  Tratamiento Categoricas #####
```

```{r}
data = X_train_cat

# var_num = c()
var_cat = colnames(X_train_cat)

# for (i in colnames(data)) 
#   { 
#     if ( sum( is.na( data[, colnames(data)[1]] ) ) <= dim(data)[1] ) 
#       {
#         var_num = append(var_num, i)
#       }
#   }

dim(X_train_cat)
length(var_cat)
```

```{r}
# Nulos (criterio 02)

n = length(var_cat)
m = dim(data)[1]
data_na = data.frame("var" = 1:n)

for (i in 1:n) 
  {
    data_na[i, 'var'] = var_cat[i]
    data_na[i, 'prc_na'] = length(which(is.na( data[, var_cat[i]] )))/m
  }

# data_na[data_na[,'prc_na'] > 0.8,]
# data_na[order(data_na$prc_na),]

write.table(data_na,paste(readline(),"na_cat.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

# https://rpubs.com/cghv94/operaciones-con-conjuntos

var_cat = setdiff(var_cat, as.character( data_na[data_na[, 'prc_na'] > 0.8, 'var'] ) )

length(var_cat)
```

```{r}
# IV (criterio 01)

# start_time = as.numeric(Sys.time())

data_woeBinning = woe.binning(cbind(data[, var_cat], y_train), "malo", var_cat, min.perc.total=0.05)

n = dim( data_woeBinning )[1]
data_wbng = data.frame( "var" = 1:n )

for (i in 1:n ) {

    data_wbng[i, 'var'] = data_woeBinning[,1][[i]]
    data_wbng[i, 'iv'] = data_woeBinning[,3][[i]]

}

# time_process('Lista de woeBinning', start_time)

write.table(data_wbng,paste(readline(),"data_wbng_cat.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

# data_wbng = read.table(file.choose(), header = T, sep = ',')
# 
var_cat = as.character(data_wbng[data_wbng[,'iv'] >= 0.02 & data_wbng[,'iv'] < 0.5,]$var)

length(var_cat)
```

```{r}
# chisqrelacion
n = length(var_cat)
k = n * (n-1) / 2
data_fisher = data.frame( "var" = 1:k )
r = 1

start_time = as.numeric(Sys.time())

for (i in 1:(n-1)) {
  
  for (j in (i+1):n ) { 

    # https://rpubs.com/osoramirez/111403
        
    x = data[, var_cat[i]]
    y = data[, var_cat[j]]
    
    data_fisher[r, 'var'] = var_cat[i]
    data_fisher[r, 'var_2'] = var_cat[j]
    # data_chisq[r, 'chisq'] = chisq.test( x, y)$p.value
    data_fisher[r, 'fisher'] = fisher.test( table(x, y), simulate.p.value=TRUE )$p.value
    
    r = r + 1
  }
  
}

time_process('Relacion entre datos categoricos', start_time)

write.table(data_fisher,paste(readline(),"fisher_cat.csv",sep="\\"), sep=',')
# PATH: D:\GIAP\Curvas_PE\Recolocado\calibracion\202108\Recolocado_ADM\analisis

var_cat = setdiff(var_cat, unique( data_fisher[abs( data_fisher[, 'fisher'] ) >= 0.6, 'var_2'] ) )

length(var_cat)
```

```{r}
var_cat
```

```{r}

# Comparacion
dim(data[data$filtro == 0,])
dim(data_train) + dim(data_test) + dim(data_oot)

# Train & Test
dim(data_train)
dim(data_test)

# Tasa de malos
mean(data$tm)
mean(data_train$tm)
mean(data_test$tm)

```

```{r}
##################################
######      Bivariados      ######
##################################

biv = list(name = c(), iv_tr = c(), iv_ts = c())
```

```{r}
# Numericos
bin = c(0, 4)
tb = AnalisisWoe('saldo_mora', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
# Categoricos
A=c(0)
B=c(1:4)
C=c("2. CPP Perdida")
D=c("5. NA","9999")
tb = AnalisisWoe('calificacion_sinalin', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c(0)
B=c(1:4)
C=c(2:4)
D=c("5. NA","9999")
tb = AnalisisWoe('calificacion_conalin', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(275, 600)
tb = AnalisisWoe('saldo_int', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(0,50)
tb = AnalisisWoe('por_cal1234_max1m6', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(0, 8200)
tb = AnalisisWoe('saldo_cal1234_max1m6', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(1,5)
tb = AnalisisWoe('rec_mora0_1m12', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(0,30)
tb = tb_rec_mora0_1m12 = AnalisisWoe('mora_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
# bin = c(0,30) # materialidad
# AnalisisWoe('cap_ven', list(data_train, data_test), 'numeric', NULL)
```

```{r}
# bin = c(0) # sentido
# AnalisisWoe('por_uso_efectivo_0m', list(data_train, data_test), 'numeric', bin)
```

```{r}
bin = c(0) # sentido
AnalisisWoe('disp_efectivo_0m', list(data_train, data_test), 'numeric', bin)
```

```{r}
bin = c(2150, 8000)
tb = AnalisisWoe('linea_total_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(0.8,0.98)
tb =AnalisisWoe('por_uso_linea_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
# bin = c(0.8,0.98) # sentido
# AnalisisWoe('cap_vig', list(data_train, data_test), 'numeric', NULL)
```

```{r}
# bin = c(10000)
# AnalisisWoe('saldo_0m', list(data_train, data_test), 'numeric', bin) # Iv
```

```{r}
bin = c(0)
tb = AnalisisWoe('por_novig_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)
```

```{r}
bin = c(1) # sentido
AnalisisWoe('can_emp_0m', list(data_train, data_test), 'numeric', bin)
```

```{r}
# bin = c(1) # materialidad
# AnalisisWoe('por_me_0m', list(data_train, data_test), 'numeric', NULL)
```

```{r}
# bin = c(1) # materialidad
# AnalisisWoe('saldo_me_0m', list(data_train, data_test), 'numeric', NULL)
```

```{r}
bin = c(41, 48, 55)
tb = AnalisisWoe('edad', list(data_train, data_test), 'numeric', bin) # Iv
tb; biv = biv_iv(biv,tb)
########################################################################################################################
```

```{r}
A=c("Cero por_cal1234")
B=c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234","Cien por_cal1234")
C=c("Mayor por_cal1234")
D=c("Cien por_cal1234")
tb = AnalisisWoe('por_cal1234_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora0")
B=c("Menor por_mora0","Igual por_mora0","Mayor por_mora0","Cien por_mora0")
C=c("Cien por_mora0")
D=c("Mayor por_mora0")
E=c("Cien por_mora0")
tb = AnalisisWoe('por_mora0_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_cal1234")
B=c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234")
C=c("Cien por_cal1234")
D=c("Mayor por_cal1234")
E=c("Cien por_cal1234")
tb = AnalisisWoe('por_cal1234_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B,C))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4")
# B=c("3_3","3_4","4_4")
# C=c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2")
# AnalisisWoe('calificacion_1m_max2m12', list(data_train, data_test), 'factor', list(A,B,C)) # sentido
```

```{r}
A=c("Cero por_mora30")
B=c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30")
C=c("Cien por_mora30")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora30_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora60")
B=c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60")
C=c("Cien por_mora60")
D=c("Mayor por_mora60")
E=c("Cien por_mora60")
tb = AnalisisWoe('por_mora60_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero mora")
B=c("Menor mora","Igual mora","Mayor mora","Cien mora")
C=c("Cien por_mora60")
D=c("Mayor por_mora60")
E=c("Cien por_mora60")
tb = AnalisisWoe('mora_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4")
# B=c("3_3","3_4","4_4")
# C=c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2")
# AnalisisWoe('calificacion_max1m3_max4m12', list(data_train, data_test), 'factor', list(A,B,C)) # sentido
```

```{r}
A=c("Cero mora")
B=c("Menor mora","Igual mora","Mayor mora")
C=c("Cien por_mora60")
D=c("Mayor por_mora60")
E=c("Cien por_mora60")
tb = AnalisisWoe('mora_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora90")
B=c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90")
C=c("Cien por_mora90")
D=c("Mayor por_mora90")
E=c("Cien por_mora90")
tb = AnalisisWoe('por_mora90_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_cal234")
B=c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234")
C=c("Cien por_mora30")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal234_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_cal34")
B=c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34")
C=c("Cien por_cal34")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal34_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_cal4")
B=c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal4_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora60")
B=c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora60_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora90")
B=c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora90_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_castigo")
B=c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_castigo_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora0")
B=c("Menor por_mora0","Igual por_mora0","Mayor por_mora0")
C=c("Cien por_mora0")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora0_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B,C))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_cal4")
B=c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal4_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("Cero por_vig")
# B=c("Menor por_vig","Igual por_vig","Mayor por_vig","Cien por_vig")
# C=c("Cien por_cal4")
# D=c("Mayor por_mora30")
# E=c("Cien por_mora30")
# AnalisisWoe('por_vig_var1m3', list(data_train, data_test), 'factor', list(A,B)) # tm
```

```{r}
A=c("Cero por_cal234")
B=c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234")
C=c("Cien por_cal234")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal234_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora30")
B=c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30")
C=c("Cien por_mora30")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora30_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_castigo")
B=c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo")
C=c("Cien por_castigo")
D=c("Mayor por_castigo")
E=c("Cien por_castigo")
tb = AnalisisWoe('por_castigo_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("Cero por_mora_0")
# B=c("Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0","Cien por_mora_0")
# C=c("Cien por_mora_0")
# D=c("Mayor por_mora_0")
# E=c("Cien por_mora_0")
# AnalisisWoe('por_mora_0_var1m3', list(data_train, data_test), 'factor', list(A,B)) # sentido
```

```{r}
A=c("Cero por_cal34")
B=c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34")
C=c("Cien por_cal34")
D=c("Mayor por_cal34")
E=c("Cien por_cal34")
tb = AnalisisWoe('por_cal34_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0")
B=c("Cien por_cal0")
C=c("Cien por_cal0")
D=c("Mayor por_cal34")
E=c("Cien por_cal34")
tb = AnalisisWoe('por_cal0_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c(
#     "0_0", "0_8", "0_9" #g1
# )
# B=c(
#     "1_0", "1_8", "1_9", #g2
#     "2_0", "2_8", "2_9", #g2
#     "3_0", "3_8", "3_9", #g2
#     "4_0", "4_8", "4_9" #g2
# )
# C=c(
#     "0_1", #g3
# # )
# # D=c(
#     "1_1", #g4
# # )
# # E=c(
#     "2_1", #g5
#     "3_1", #g5
#     "4_1", #g5
# # )
# # F=c(
#     "0_2", #g6
#     "1_2", #g6
# # )
# # G=c(
#     "2_2", #g7
# # )
# # H=c(
#     "3_2", #g8
#     "4_2", #g8
# # )
# # I=c(
#     "0_3", #g9
#     "1_3", #g9
#     "2_3", #g9
# # )
# # J=c(
#     "3_3", #g10
# # )
# # K=c(
#     "4_3", #g11
# # )
# # L=c(
#     "0_4", #g12
#     "1_4", #g12
#     "2_4", #g12
#     "3_4", #g12
# # )
# # M=c(
#     "4_4" #g13
# )
# D=c(# N=c(
#     "8_9", "9_8", "8_8", "9_9", #g14
#     "8_0", "8_1", "8_2", "8_3", "8_4", #g14
#     "9_0", "9_1", "9_2", "9_3", "9_4" #g14
# )
# AnalisisWoe('calificacion_var1m6', list(data_train, data_test), 'factor', list(A,B,C,D)) # sentido
```

```{r}
A=c("Cero por_vig","Menor por_vig","Igual por_vig","Mayor por_vig")
B=c("Cien por_vig")
C=c("Cien por_vig")
D=c("Mayor por_vig")
E=c("Cien por_vig")
tb = AnalisisWoe('por_vig_1m_min2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("Cero saldo")
# B=c("Menor saldo","Igual saldo","Mayor saldo")
# C=c("Cien saldo")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('saldo_var1m3', list(data_train, data_test), 'factor', list(A,B)) # Iv
```

```{r}
# A=c("Cero saldo")
# B=c("Menor saldo","Igual saldo","Mayor saldo")
# C=c("Cien saldo")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('saldo_1m_max2m12', list(data_train, data_test), 'factor', list(A,B)) # Iv
```

```{r}
A=c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0")
B=c("Cien por_cal0")
C=c("Cien por_cal0")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('por_cal0_min1m6_min7m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero por_mora_0","Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0")
B=c("Cien por_mora_0")
C=c("Cien por_mora_0")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('por_mora_0_1m_min2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("ALQUILADO","")
B=c("FAMILIAR")
C=c("PROPIO")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('vivienda', list(data_train, data_test), 'factor', list(A,B,C))
tb; biv = biv_iv(biv,tb)
```

```{r}
A=c("Cero linea_activa")
B=c("Menor linea_activa","Igual linea_activa","Mayor linea_activa")
C=c("Cien por_mora_0")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('linea_activa_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("Cero por_uso_linea")
# B=c("Menor por_uso_linea","Igual por_uso_linea","Mayor por_uso_linea")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_linea_var1m3', list(data_train, data_test), 'factor', list(A,B,C)) # sentido
```

```{r}
A=c("Cero linea_activa")
B=c("Menor linea_activa","Igual linea_activa","Mayor linea_activa")
C=c("Cien linea_activa")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('linea_activa_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# A=c("Cero por_uso_efectivo")
# B=c("Menor por_uso_efectivo","Igual por_uso_efectivo","Mayor por_uso_efectivo")
# C=c("Cien por_uso_efectivo")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_efectivo_var1m3', list(data_train, data_test), 'factor', list(A,B)) # sentido
```

```{r}
# A=c("Cero por_uso_linea")
# B=c("Menor por_uso_linea","Igual por_uso_linea","Mayor por_uso_linea")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_linea_max1m3_max4m12', list(data_train, data_test), 'factor', list(A,B)) # sentido
```

```{r}
# A=c("Cero por_uso_efectivo")
# B=c("Menor por_uso_efectivo","Igual por_uso_efectivo","Mayor por_uso_efectivo")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_efectivo_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B)) # sentido
```

```{r}
# A=c("Taxista propietario")
# B=c("Taxista palanca")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('perfil', list(data_train, data_test), 'factor', list(A)) # IV
```

```{r}
# A=c("Taxista palanca")
# B=c("Taxista propietario")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('garpref', list(data_train, data_test), 'factor', NULL) # sentido
```

```{r}
# A=c("Cero can_emp")
# B=c("Menor can_emp","Igual can_emp","Mayor can_emp")
# C=c("Cien can_emp")
# D=c("Mayor can_emp")
# E=c("Cien can_emp")
# AnalisisWoe('can_emp_var1m12', list(data_train, data_test), 'factor', list(A,B)) # IV
```

```{r}
# A=c("Cero can_emp")
# B=c("Menor can_emp","Igual can_emp","Mayor can_emp")
# C=c("Cien can_emp")
# D=c("Mayor can_emp")
# E=c("Cien can_emp")
# AnalisisWoe('can_emp_1m_max2m12', list(data_train, data_test), 'factor', list(A,B)) # IV
```

```{r}
A=c("Cero por_novig")
B=c("Menor por_novig","Igual por_novig","Mayor por_novig","Cien por_novig")
C=c("Cien por_novig")
D=c("Mayor can_emp")
E=c("Cien can_emp")
tb = AnalisisWoe('por_novig_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)
```

```{r}
# Correr todo:


# Numericos
bin = c(0, 4)
tb = AnalisisWoe('saldo_mora', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



# Categoricos
A=c(0)
B=c(1:4)
C=c("2. CPP Perdida")
D=c("5. NA","9999")
tb = AnalisisWoe('calificacion_sinalin', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c(0)
B=c(1:4)
C=c(2:4)
D=c("5. NA","9999")
tb = AnalisisWoe('calificacion_conalin', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



bin = c(275, 600)
tb = AnalisisWoe('saldo_int', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



bin = c(0,50)
tb = AnalisisWoe('por_cal1234_max1m6', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



bin = c(0, 8200)
tb = AnalisisWoe('saldo_cal1234_max1m6', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



bin = c(1,5)
tb = AnalisisWoe('rec_mora0_1m12', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



bin = c(0,30)
tb = tb_rec_mora0_1m12 = AnalisisWoe('mora_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



# bin = c(0,30) # materialidad
# AnalisisWoe('cap_ven', list(data_train, data_test), 'numeric', NULL)



# bin = c(0) # sentido
# AnalisisWoe('por_uso_efectivo_0m', list(data_train, data_test), 'numeric', bin)



bin = c(0) # sentido
AnalisisWoe('disp_efectivo_0m', list(data_train, data_test), 'numeric', bin)



bin = c(2150, 8000)
tb = AnalisisWoe('linea_total_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



bin = c(0.8,0.98)
tb =AnalisisWoe('por_uso_linea_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



# bin = c(0.8,0.98) # sentido
# AnalisisWoe('cap_vig', list(data_train, data_test), 'numeric', NULL)



# bin = c(10000)
# AnalisisWoe('saldo_0m', list(data_train, data_test), 'numeric', bin) # Iv



bin = c(0)
tb = AnalisisWoe('por_novig_0m', list(data_train, data_test), 'numeric', bin)
tb; biv = biv_iv(biv,tb)



bin = c(1) # sentido
AnalisisWoe('can_emp_0m', list(data_train, data_test), 'numeric', bin)



# bin = c(1) # materialidad
# AnalisisWoe('por_me_0m', list(data_train, data_test), 'numeric', NULL)



# bin = c(1) # materialidad
# AnalisisWoe('saldo_me_0m', list(data_train, data_test), 'numeric', NULL)



bin = c(41, 48, 55)
tb = AnalisisWoe('edad', list(data_train, data_test), 'numeric', bin) # Iv
tb; biv = biv_iv(biv,tb)
########################################################################################################################



A=c("Cero por_cal1234")
B=c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234","Cien por_cal1234")
C=c("Mayor por_cal1234")
D=c("Cien por_cal1234")
tb = AnalisisWoe('por_cal1234_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora0")
B=c("Menor por_mora0","Igual por_mora0","Mayor por_mora0","Cien por_mora0")
C=c("Cien por_mora0")
D=c("Mayor por_mora0")
E=c("Cien por_mora0")
tb = AnalisisWoe('por_mora0_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_cal1234")
B=c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234")
C=c("Cien por_cal1234")
D=c("Mayor por_cal1234")
E=c("Cien por_cal1234")
tb = AnalisisWoe('por_cal1234_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B,C))
tb; biv = biv_iv(biv,tb)



# A=c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4")
# B=c("3_3","3_4","4_4")
# C=c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2")
# AnalisisWoe('calificacion_1m_max2m12', list(data_train, data_test), 'factor', list(A,B,C)) # sentido



A=c("Cero por_mora30")
B=c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30")
C=c("Cien por_mora30")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora30_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora60")
B=c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60")
C=c("Cien por_mora60")
D=c("Mayor por_mora60")
E=c("Cien por_mora60")
tb = AnalisisWoe('por_mora60_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero mora")
B=c("Menor mora","Igual mora","Mayor mora","Cien mora")
C=c("Cien por_mora60")
D=c("Mayor por_mora60")
E=c("Cien por_mora60")
tb = AnalisisWoe('mora_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4")
# B=c("3_3","3_4","4_4")
# C=c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2")
# AnalisisWoe('calificacion_max1m3_max4m12', list(data_train, data_test), 'factor', list(A,B,C)) # sentido



A=c("Cero mora")
B=c("Menor mora","Igual mora","Mayor mora")
C=c("Cien por_mora60")
D=c("Mayor por_mora60")
E=c("Cien por_mora60")
tb = AnalisisWoe('mora_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora90")
B=c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90")
C=c("Cien por_mora90")
D=c("Mayor por_mora90")
E=c("Cien por_mora90")
tb = AnalisisWoe('por_mora90_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_cal234")
B=c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234")
C=c("Cien por_mora30")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal234_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_cal34")
B=c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34")
C=c("Cien por_cal34")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal34_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_cal4")
B=c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal4_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora60")
B=c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora60_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora90")
B=c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora90_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_castigo")
B=c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_castigo_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora0")
B=c("Menor por_mora0","Igual por_mora0","Mayor por_mora0")
C=c("Cien por_mora0")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora0_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B,C))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_cal4")
B=c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4")
C=c("Cien por_cal4")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal4_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c("Cero por_vig")
# B=c("Menor por_vig","Igual por_vig","Mayor por_vig","Cien por_vig")
# C=c("Cien por_cal4")
# D=c("Mayor por_mora30")
# E=c("Cien por_mora30")
# AnalisisWoe('por_vig_var1m3', list(data_train, data_test), 'factor', list(A,B)) # tm



A=c("Cero por_cal234")
B=c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234")
C=c("Cien por_cal234")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_cal234_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora30")
B=c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30")
C=c("Cien por_mora30")
D=c("Mayor por_mora30")
E=c("Cien por_mora30")
tb = AnalisisWoe('por_mora30_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_castigo")
B=c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo")
C=c("Cien por_castigo")
D=c("Mayor por_castigo")
E=c("Cien por_castigo")
tb = AnalisisWoe('por_castigo_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c("Cero por_mora_0")
# B=c("Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0","Cien por_mora_0")
# C=c("Cien por_mora_0")
# D=c("Mayor por_mora_0")
# E=c("Cien por_mora_0")
# AnalisisWoe('por_mora_0_var1m3', list(data_train, data_test), 'factor', list(A,B)) # sentido



A=c("Cero por_cal34")
B=c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34")
C=c("Cien por_cal34")
D=c("Mayor por_cal34")
E=c("Cien por_cal34")
tb = AnalisisWoe('por_cal34_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0")
B=c("Cien por_cal0")
C=c("Cien por_cal0")
D=c("Mayor por_cal34")
E=c("Cien por_cal34")
tb = AnalisisWoe('por_cal0_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c(
#     "0_0", "0_8", "0_9" #g1
# )
# B=c(
#     "1_0", "1_8", "1_9", #g2
#     "2_0", "2_8", "2_9", #g2
#     "3_0", "3_8", "3_9", #g2
#     "4_0", "4_8", "4_9" #g2
# )
# C=c(
#     "0_1", #g3
# # )
# # D=c(
#     "1_1", #g4
# # )
# # E=c(
#     "2_1", #g5
#     "3_1", #g5
#     "4_1", #g5
# # )
# # F=c(
#     "0_2", #g6
#     "1_2", #g6
# # )
# # G=c(
#     "2_2", #g7
# # )
# # H=c(
#     "3_2", #g8
#     "4_2", #g8
# # )
# # I=c(
#     "0_3", #g9
#     "1_3", #g9
#     "2_3", #g9
# # )
# # J=c(
#     "3_3", #g10
# # )
# # K=c(
#     "4_3", #g11
# # )
# # L=c(
#     "0_4", #g12
#     "1_4", #g12
#     "2_4", #g12
#     "3_4", #g12
# # )
# # M=c(
#     "4_4" #g13
# )
# D=c(# N=c(
#     "8_9", "9_8", "8_8", "9_9", #g14
#     "8_0", "8_1", "8_2", "8_3", "8_4", #g14
#     "9_0", "9_1", "9_2", "9_3", "9_4" #g14
# )
# AnalisisWoe('calificacion_var1m6', list(data_train, data_test), 'factor', list(A,B,C,D)) # sentido



A=c("Cero por_vig","Menor por_vig","Igual por_vig","Mayor por_vig")
B=c("Cien por_vig")
C=c("Cien por_vig")
D=c("Mayor por_vig")
E=c("Cien por_vig")
tb = AnalisisWoe('por_vig_1m_min2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c("Cero saldo")
# B=c("Menor saldo","Igual saldo","Mayor saldo")
# C=c("Cien saldo")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('saldo_var1m3', list(data_train, data_test), 'factor', list(A,B)) # Iv



# A=c("Cero saldo")
# B=c("Menor saldo","Igual saldo","Mayor saldo")
# C=c("Cien saldo")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('saldo_1m_max2m12', list(data_train, data_test), 'factor', list(A,B)) # Iv



A=c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0")
B=c("Cien por_cal0")
C=c("Cien por_cal0")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('por_cal0_min1m6_min7m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("Cero por_mora_0","Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0")
B=c("Cien por_mora_0")
C=c("Cien por_mora_0")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('por_mora_0_1m_min2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



A=c("ALQUILADO","")
B=c("FAMILIAR")
C=c("PROPIO")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('vivienda', list(data_train, data_test), 'factor', list(A,B,C))
tb; biv = biv_iv(biv,tb)



A=c("Cero linea_activa")
B=c("Menor linea_activa","Igual linea_activa","Mayor linea_activa")
C=c("Cien por_mora_0")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('linea_activa_var1m3', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c("Cero por_uso_linea")
# B=c("Menor por_uso_linea","Igual por_uso_linea","Mayor por_uso_linea")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_linea_var1m3', list(data_train, data_test), 'factor', list(A,B,C)) # sentido



A=c("Cero linea_activa")
B=c("Menor linea_activa","Igual linea_activa","Mayor linea_activa")
C=c("Cien linea_activa")
D=c("Mayor saldo")
E=c("Cien saldo")
tb = AnalisisWoe('linea_activa_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)



# A=c("Cero por_uso_efectivo")
# B=c("Menor por_uso_efectivo","Igual por_uso_efectivo","Mayor por_uso_efectivo")
# C=c("Cien por_uso_efectivo")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_efectivo_var1m3', list(data_train, data_test), 'factor', list(A,B)) # sentido



# A=c("Cero por_uso_linea")
# B=c("Menor por_uso_linea","Igual por_uso_linea","Mayor por_uso_linea")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_linea_max1m3_max4m12', list(data_train, data_test), 'factor', list(A,B)) # sentido



# A=c("Cero por_uso_efectivo")
# B=c("Menor por_uso_efectivo","Igual por_uso_efectivo","Mayor por_uso_efectivo")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('por_uso_efectivo_max1m6_max7m12', list(data_train, data_test), 'factor', list(A,B)) # sentido



# A=c("Taxista propietario")
# B=c("Taxista palanca")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('perfil', list(data_train, data_test), 'factor', list(A)) # IV



# A=c("Taxista palanca")
# B=c("Taxista propietario")
# C=c("Cien por_uso_linea")
# D=c("Mayor saldo")
# E=c("Cien saldo")
# AnalisisWoe('garpref', list(data_train, data_test), 'factor', NULL) # sentido



# A=c("Cero can_emp")
# B=c("Menor can_emp","Igual can_emp","Mayor can_emp")
# C=c("Cien can_emp")
# D=c("Mayor can_emp")
# E=c("Cien can_emp")
# AnalisisWoe('can_emp_var1m12', list(data_train, data_test), 'factor', list(A,B)) # IV



# A=c("Cero can_emp")
# B=c("Menor can_emp","Igual can_emp","Mayor can_emp")
# C=c("Cien can_emp")
# D=c("Mayor can_emp")
# E=c("Cien can_emp")
# AnalisisWoe('can_emp_1m_max2m12', list(data_train, data_test), 'factor', list(A,B)) # IV



A=c("Cero por_novig")
B=c("Menor por_novig","Igual por_novig","Mayor por_novig","Cien por_novig")
C=c("Cien por_novig")
D=c("Mayor can_emp")
E=c("Cien can_emp")
tb = AnalisisWoe('por_novig_1m_max2m12', list(data_train, data_test), 'factor', list(A,B))
tb; biv = biv_iv(biv,tb)


```


```{r}
############################
######      WOES      ######
############################
# var_chr[31:43] #43
# unique(data[,'perfil'])
```

```{r}
# por_novig_1m_max2m12
data_train$por_novig_1m_max2m12_woe = ifelse( is.na(data_train$por_novig_1m_max2m12), -0.2532,
      ifelse(data_train$por_novig_1m_max2m12 %in% c("Cero por_novig"), 0.1052,
      ifelse(data_train$por_novig_1m_max2m12 %in% c("Menor por_novig","Igual por_novig","Mayor por_novig","Cien por_novig"), -0.2532, 0)))
data_test$por_novig_1m_max2m12_woe = ifelse( is.na(data_test$por_novig_1m_max2m12), -0.2532,
      ifelse(data_test$por_novig_1m_max2m12 %in% c("Cero por_novig"), 0.1052,
      ifelse(data_test$por_novig_1m_max2m12 %in% c("Menor por_novig","Igual por_novig","Mayor por_novig","Cien por_novig"), -0.2532,0)))
# # can_emp_1m_max2m12
# data_train$can_emp_1m_max2m12_woe = ifelse( is.na(data_train$can_emp_1m_max2m12), -0.0575,
#       ifelse(data_train$can_emp_1m_max2m12 %in% c("Cero can_emp"), 0.7163,
#       ifelse(data_train$can_emp_1m_max2m12 %in% c("Menor can_emp","Igual can_emp","Mayor can_emp"), -0.0575, 0)))
# data_test$can_emp_1m_max2m12_woe = ifelse( is.na(data_test$can_emp_1m_max2m12), -0.0575,
#       ifelse(data_test$can_emp_1m_max2m12 %in% c("Cero can_emp"), 0.7163,
#       ifelse(data_test$can_emp_1m_max2m12 %in% c("Menor can_emp","Igual can_emp","Mayor can_emp"), -0.0575,0)))
# # can_emp_var1m12
# data_train$can_emp_var1m12_woe = ifelse( is.na(data_train$can_emp_var1m12), -0.0694,
#       ifelse(data_train$can_emp_var1m12 %in% c("Cero can_emp"), 0.6536,
#       ifelse(data_train$can_emp_var1m12 %in% c("Menor can_emp","Igual can_emp","Mayor can_emp"), -0.0694, 0)))
# data_test$can_emp_var1m12_woe = ifelse( is.na(data_test$can_emp_var1m12), -0.0694,
#       ifelse(data_test$can_emp_var1m12 %in% c("Cero can_emp"), 0.6536,
#       ifelse(data_test$can_emp_var1m12 %in% c("Menor can_emp","Igual can_emp","Mayor can_emp"), -0.0694,0)))
# # garpref
# data_train$garpref_woe = ifelse( is.na(data_train$garpref), -0.3031,
#       ifelse(data_train$garpref %in% c("false"), 0.0564,
#       ifelse(data_train$garpref %in% c("true"), -0.3031, 0)))
# data_test$garpref_woe = ifelse( is.na(data_test$garpref), -0.3031,
#       ifelse(data_test$garpref %in% c("false"), 0.0564,
#       ifelse(data_test$garpref %in% c("true"), -0.3031,0)))
# # perfil
# data_train$perfil_woe = ifelse( is.na(data_train$perfil), -0.0823,
#       ifelse(data_train$perfil %in% c("Taxista propietario"), -0.0823,
#       ifelse(data_train$perfil %in% c("Taxista palanca","Dependiente - Formal","Independiente - Informal","Dependiente - Informal","","Transportista","Mototaxista palanca","Independiente - Formal"), 0.4345, 0)))
# data_test$perfil_woe = ifelse( is.na(data_test$perfil), -0.0823,
#       ifelse(data_test$perfil %in% c("Taxista propietario"), -0.0823,
#       ifelse(data_test$perfil %in% c("Taxista palanca","Dependiente - Formal","Independiente - Informal","Dependiente - Informal","","Transportista","Mototaxista palanca","Independiente - Formal"), 0.4345,0)))
# linea_activa_max1m6_max7m12
data_train$linea_activa_max1m6_max7m12_woe = ifelse( is.na(data_train$linea_activa_max1m6_max7m12), -0.1517,
      ifelse(data_train$linea_activa_max1m6_max7m12 %in% c("Cero linea_activa"), -0.1517,
      ifelse(data_train$linea_activa_max1m6_max7m12 %in% c("Menor linea_activa","Igual linea_activa","Mayor linea_activa"), 0.2860, 0)))
data_test$linea_activa_max1m6_max7m12_woe = ifelse( is.na(data_test$linea_activa_max1m6_max7m12), -0.1517,
      ifelse(data_test$linea_activa_max1m6_max7m12 %in% c("Cero linea_activa"), -0.1517,
      ifelse(data_test$linea_activa_max1m6_max7m12 %in% c("Menor linea_activa","Igual linea_activa","Mayor linea_activa"), 0.2860,0)))
# linea_activa_var1m3
data_train$linea_activa_var1m3_woe = ifelse( is.na(data_train$linea_activa_var1m3), -0.1613,
      ifelse(data_train$linea_activa_var1m3 %in% c("Cero linea_activa"), -0.1613,
      ifelse(data_train$linea_activa_var1m3 %in% c("Menor linea_activa","Igual linea_activa","Mayor linea_activa"), 0.4252, 0)))
data_test$linea_activa_var1m3_woe = ifelse( is.na(data_test$linea_activa_var1m3), -0.1613,
      ifelse(data_test$linea_activa_var1m3 %in% c("Cero linea_activa"), -0.1613,
      ifelse(data_test$linea_activa_var1m3 %in% c("Menor linea_activa","Igual linea_activa","Mayor linea_activa"), 0.4252,0)))
# vivienda
# data_train$vivienda_woe = ifelse( is.na(data_train$vivienda), -0.3476,
#       ifelse(data_train$vivienda %in% c("ALQUILADO",""), -0.3476, 
#       ifelse(data_train$vivienda %in% c("FAMILIAR"), 0.0106,
#       ifelse(data_train$vivienda %in% c("PROPIO"), 0.5327, 0))))
# data_test$vivienda_woe = ifelse( is.na(data_test$vivienda), -0.3476,
#       ifelse(data_test$vivienda %in% c("ALQUILADO",""), -0.3476, 
#       ifelse(data_test$vivienda %in% c("FAMILIAR"), 0.0106,
#       ifelse(data_test$vivienda %in% c("PROPIO"), 0.5327,0))))
# por_mora_0_1m_min2m12
data_train$por_mora_0_1m_min2m12_woe = ifelse( is.na(data_train$por_mora_0_1m_min2m12), -0.1097,
      ifelse(data_train$por_mora_0_1m_min2m12 %in% c("Cero por_mora_0","Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0"), -0.1097,
      ifelse(data_train$por_mora_0_1m_min2m12 %in% c("Cien por_mora_0"), 0.4834, 0)))
data_test$por_mora_0_1m_min2m12_woe = ifelse( is.na(data_test$por_mora_0_1m_min2m12), -0.1097,
      ifelse(data_test$por_mora_0_1m_min2m12 %in% c("Cero por_mora_0","Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0"), -0.1097,
      ifelse(data_test$por_mora_0_1m_min2m12 %in% c("Cien por_mora_0"), 0.4834,0)))
# por_cal0_min1m6_min7m12
data_train$por_cal0_min1m6_min7m12_woe = ifelse( is.na(data_train$por_cal0_min1m6_min7m12), -0.1244,
      ifelse(data_train$por_cal0_min1m6_min7m12 %in% c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0"), -0.1244,
      ifelse(data_train$por_cal0_min1m6_min7m12 %in% c("Cien por_cal0"), 0.6309, 0)))
data_test$por_cal0_min1m6_min7m12_woe = ifelse( is.na(data_test$por_cal0_min1m6_min7m12), -0.1244,
      ifelse(data_test$por_cal0_min1m6_min7m12 %in% c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0"), -0.1244,
      ifelse(data_test$por_cal0_min1m6_min7m12 %in% c("Cien por_cal0"), 0.6309,0)))
# # saldo_1m_max2m12
# data_train$saldo_1m_max2m12_woe = ifelse( is.na(data_train$saldo_1m_max2m12), -0.0715,
#       ifelse(data_train$saldo_1m_max2m12 %in% c("Cero saldo"), 0.7205,
#       ifelse(data_train$saldo_1m_max2m12 %in% c("Menor saldo","Igual saldo","Mayor saldo"), -0.0715, 0)))
# data_test$saldo_1m_max2m12_woe = ifelse( is.na(data_test$saldo_1m_max2m12), -0.0715,
#       ifelse(data_test$saldo_1m_max2m12 %in% c("Cero saldo"), 0.7205,
#       ifelse(data_test$saldo_1m_max2m12 %in% c("Menor saldo","Igual saldo","Mayor saldo"), -0.0715,0)))
# # saldo_var1m3
# data_train$saldo_var1m3_woe = ifelse( is.na(data_train$saldo_var1m3), -0.1022,
#       ifelse(data_train$saldo_var1m3 %in% c("Cero saldo"), 0.6718,
#       ifelse(data_train$saldo_var1m3 %in% c("Menor saldo","Igual saldo","Mayor saldo"), -0.1022, 0)))
# data_test$saldo_var1m3_woe = ifelse( is.na(data_test$saldo_var1m3), -0.1022,
#       ifelse(data_test$saldo_var1m3 %in% c("Cero saldo"), 0.6718,
#       ifelse(data_test$saldo_var1m3 %in% c("Menor saldo","Igual saldo","Mayor saldo"), -0.1022,0)))
# por_vig_1m_min2m12
data_train$por_vig_1m_min2m12_woe = ifelse( is.na(data_train$por_vig_1m_min2m12), -0.1428,
      ifelse(data_train$por_vig_1m_min2m12 %in% c("Cero por_vig","Menor por_vig","Igual por_vig","Mayor por_vig"), -0.1428,
      ifelse(data_train$por_vig_1m_min2m12 %in% c("Cien por_vig"), 0.2972, 0)))
data_test$por_vig_1m_min2m12_woe = ifelse( is.na(data_test$por_vig_1m_min2m12), -0.1428,
      ifelse(data_test$por_vig_1m_min2m12 %in% c("Cero por_vig","Menor por_vig","Igual por_vig","Mayor por_vig"), -0.1428,
      ifelse(data_test$por_vig_1m_min2m12 %in% c("Cien por_vig"), 0.2972,0)))
# # calificacion_var1m6
# data_train$calificacion_var1m6_woe = ifelse( is.na(data_train$calificacion_var1m6), -0.6278,
#       ifelse(data_train$calificacion_var1m6 %in% c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4"), 0.1341, 
#       ifelse(data_train$calificacion_var1m6 %in% c("3_3","3_4","4_4"), -0.1487,
#       ifelse(data_train$calificacion_var1m6 %in% c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2"), -0.6278, 0))))
# data_test$calificacion_var1m6_woe = ifelse( is.na(data_test$calificacion_var1m6), -0.6278,
#       ifelse(data_test$calificacion_var1m6 %in% c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4"), 0.1341, 
#       ifelse(data_test$calificacion_var1m6 %in% c("3_3","3_4","4_4"), -0.1487,
#       ifelse(data_test$calificacion_var1m6 %in% c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2"), -0.6278,0))))
# por_cal0_var1m3
data_train$por_cal0_var1m3_woe = ifelse( is.na(data_train$por_cal0_var1m3), -0.1642,
      ifelse(data_train$por_cal0_var1m3 %in% c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0"), -0.1642,
      ifelse(data_train$por_cal0_var1m3 %in% c("Cien por_cal0"), 0.4206, 0)))
data_test$por_cal0_var1m3_woe = ifelse( is.na(data_test$por_cal0_var1m3), -0.1642,
      ifelse(data_test$por_cal0_var1m3 %in% c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0"), -0.1642,
      ifelse(data_test$por_cal0_var1m3 %in% c("Cien por_cal0"), 0.4206,0)))
# por_cal34_1m_max2m12
data_train$por_cal34_1m_max2m12_woe = ifelse( is.na(data_train$por_cal34_1m_max2m12), -0.3603,
      ifelse(data_train$por_cal34_1m_max2m12 %in% c("Cero por_cal34"), 0.3549,
      ifelse(data_train$por_cal34_1m_max2m12 %in% c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34"), -0.3603, 0)))
data_test$por_cal34_1m_max2m12_woe = ifelse( is.na(data_test$por_cal34_1m_max2m12), -0.3603,
      ifelse(data_test$por_cal34_1m_max2m12 %in% c("Cero por_cal34"), 0.3549,
      ifelse(data_test$por_cal34_1m_max2m12 %in% c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34"), -0.3603,0)))
# # por_mora_0_var1m3
# data_train$por_mora_0_var1m3_woe = ifelse( is.na(data_train$por_mora_0_var1m3), -0.1018,
#       ifelse(data_train$por_mora_0_var1m3 %in% c("Cero por_mora_0"), 0.2346,
#       ifelse(data_train$por_mora_0_var1m3 %in% c("Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0","Cien por_mora_0"), -0.1018, 0)))
# data_test$por_mora_0_var1m3_woe = ifelse( is.na(data_test$por_mora_0_var1m3), -0.1018,
#       ifelse(data_test$por_mora_0_var1m3 %in% c("Cero por_mora_0"), 0.2346,
#       ifelse(data_test$por_mora_0_var1m3 %in% c("Menor por_mora_0","Igual por_mora_0","Mayor por_mora_0","Cien por_mora_0"), -0.1018,0)))
# por_castigo_1m_max2m12
data_train$por_castigo_1m_max2m12_woe = ifelse( is.na(data_train$por_castigo_1m_max2m12), -0.4091,
      ifelse(data_train$por_castigo_1m_max2m12 %in% c("Cero por_castigo"), 0.2833,
      ifelse(data_train$por_castigo_1m_max2m12 %in% c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo"), -0.4091, 0)))
data_test$por_castigo_1m_max2m12_woe = ifelse( is.na(data_test$por_castigo_1m_max2m12), -0.4091,
      ifelse(data_test$por_castigo_1m_max2m12 %in% c("Cero por_castigo"), 0.2833,
      ifelse(data_test$por_castigo_1m_max2m12 %in% c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo"), -0.4091,0)))
# por_mora30_1m_max2m12
data_train$por_mora30_1m_max2m12_woe = ifelse( is.na(data_train$por_mora30_1m_max2m12), -0.3355,
      ifelse(data_train$por_mora30_1m_max2m12 %in% c("Cero por_mora30"), 0.3956,
      ifelse(data_train$por_mora30_1m_max2m12 %in% c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30"), -0.3355, 0)))
data_test$por_mora30_1m_max2m12_woe = ifelse( is.na(data_test$por_mora30_1m_max2m12), -0.3355,
      ifelse(data_test$por_mora30_1m_max2m12 %in% c("Cero por_mora30"), 0.3956,
      ifelse(data_test$por_mora30_1m_max2m12 %in% c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30"), -0.3355,0)))
# por_cal234_1m_max2m12
data_train$por_cal234_1m_max2m12_woe = ifelse( is.na(data_train$por_cal234_1m_max2m12), -0.3348,
      ifelse(data_train$por_cal234_1m_max2m12 %in% c("Cero por_cal234"), 0.4015,
      ifelse(data_train$por_cal234_1m_max2m12 %in% c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234"), -0.3348, 0)))
data_test$por_cal234_1m_max2m12_woe = ifelse( is.na(data_test$por_cal234_1m_max2m12), -0.3348,
      ifelse(data_test$por_cal234_1m_max2m12 %in% c("Cero por_cal234"), 0.4015,
      ifelse(data_test$por_cal234_1m_max2m12 %in% c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234"), -0.3348,0)))
# por_cal4_1m_max2m12
data_train$por_castigo_var1m3_woe = ifelse( is.na(data_train$por_castigo_var1m3), -0.3913,
      ifelse(data_train$por_castigo_var1m3 %in% c("Cero por_cal4"), 0.3118,
      ifelse(data_train$por_castigo_var1m3 %in% c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4"), -0.3913, 0)))
data_test$por_castigo_var1m3_woe = ifelse( is.na(data_test$por_castigo_var1m3), -0.3913,
      ifelse(data_test$por_castigo_var1m3 %in% c("Cero por_cal4"), 0.3118,
      ifelse(data_test$por_castigo_var1m3 %in% c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4"), -0.3913,0)))
# por_mora0_max1m6_max7m12
data_train$por_mora0_max1m6_max7m12_woe = ifelse( is.na(data_train$por_mora0_max1m6_max7m12), -0.3635,
      ifelse(data_train$por_mora0_max1m6_max7m12 %in% c("Cero por_mora0"), 0.5626, 
      ifelse(data_train$por_mora0_max1m6_max7m12 %in% c("Menor por_mora0","Igual por_mora0","Mayor por_mora0"), -0.1825,
      ifelse(data_train$por_mora0_max1m6_max7m12 %in% c("Mayor por_mora0"), -0.3635, 0))))
data_test$por_mora0_max1m6_max7m12_woe = ifelse( is.na(data_test$por_mora0_max1m6_max7m12), -0.3635,
      ifelse(data_test$por_mora0_max1m6_max7m12 %in% c("Cero por_mora0"), 0.5626, 
      ifelse(data_test$por_mora0_max1m6_max7m12 %in% c("Menor por_mora0","Igual por_mora0","Mayor por_mora0"), -0.1825,
      ifelse(data_test$por_mora0_max1m6_max7m12 %in% c("Mayor por_mora0"), -0.3635,0))))
# por_castigo_var1m3
data_train$por_castigo_var1m3_woe = ifelse( is.na(data_train$por_castigo_var1m3), -0.4475,
      ifelse(data_train$por_castigo_var1m3 %in% c("Cero por_castigo"), 0.2599,
      ifelse(data_train$por_castigo_var1m3 %in% c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo"), -0.4475, 0)))
data_test$por_castigo_var1m3_woe = ifelse( is.na(data_test$por_castigo_var1m3), -0.4475,
      ifelse(data_test$por_castigo_var1m3 %in% c("Cero por_castigo"), 0.2599,
      ifelse(data_test$por_castigo_var1m3 %in% c("Menor por_castigo","Igual por_castigo","Mayor por_castigo","Cien por_castigo"), -0.4475,0)))
# por_mora90_1m_max2m12
data_train$por_mora90_1m_max2m12_woe = ifelse( is.na(data_train$por_mora90_1m_max2m12), -0.3828,
      ifelse(data_train$por_mora90_1m_max2m12 %in% c("Cero por_mora90"), 0.3324,
      ifelse(data_train$por_mora90_1m_max2m12 %in% c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90"), -0.3828, 0)))
data_test$por_mora90_1m_max2m12_woe = ifelse( is.na(data_test$por_mora90_1m_max2m12), -0.3828,
      ifelse(data_test$por_mora90_1m_max2m12 %in% c("Cero por_mora90"), 0.3324,
      ifelse(data_test$por_mora90_1m_max2m12 %in% c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90"), -0.3828,0)))
# por_mora60_1m_max2m12
data_train$por_mora60_1m_max2m12_woe = ifelse( is.na(data_train$por_mora60_1m_max2m12), -0.3620,
      ifelse(data_train$por_mora60_1m_max2m12 %in% c("Cero por_mora60"), 0.3536,
      ifelse(data_train$por_mora60_1m_max2m12 %in% c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60"), -0.3620, 0)))
data_test$por_mora60_1m_max2m12_woe = ifelse( is.na(data_test$por_mora60_1m_max2m12), -0.3620,
      ifelse(data_test$por_mora60_1m_max2m12 %in% c("Cero por_mora60"), 0.3536,
      ifelse(data_test$por_mora60_1m_max2m12 %in% c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60"), -0.3620,0)))
# por_cal4_var1m3
data_train$por_cal4_var1m3_woe = ifelse( is.na(data_train$por_cal4_var1m3), -0.4320,
      ifelse(data_train$por_cal4_var1m3 %in% c("Cero por_cal4"), 0.2849,
      ifelse(data_train$por_cal4_var1m3 %in% c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4"), -0.4320, 0)))
data_test$por_cal4_var1m3_woe = ifelse( is.na(data_test$por_cal4_var1m3), -0.4320,
      ifelse(data_test$por_cal4_var1m3 %in% c("Cero por_cal4"), 0.2849,
      ifelse(data_test$por_cal4_var1m3 %in% c("Menor por_cal4","Igual por_cal4","Mayor por_cal4","Cien por_cal4"), -0.4320,0)))
# por_cal34_var1m3
data_train$por_cal34_var1m3_woe = ifelse( is.na(data_train$por_cal34_var1m3), -0.4096,
      ifelse(data_train$por_cal34_var1m3 %in% c("Cero por_cal34"), 0.3203,
      ifelse(data_train$por_cal34_var1m3 %in% c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34"), -0.4096, 0)))
data_test$por_cal34_var1m3_woe = ifelse( is.na(data_test$por_cal34_var1m3), -0.4096,
      ifelse(data_test$por_cal34_var1m3 %in% c("Cero por_cal34"), 0.3203,
      ifelse(data_test$por_cal34_var1m3 %in% c("Menor por_cal34","Igual por_cal34","Mayor por_cal34","Cien por_cal34"), -0.4096,0)))
# por_cal234_var1m3
data_train$por_cal234_var1m3_woe = ifelse( is.na(data_train$por_cal234_var1m3), -0.3914,
      ifelse(data_train$por_cal234_var1m3 %in% c("Cero por_cal234"), 0.3516,
      ifelse(data_train$por_cal234_var1m3 %in% c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234"), -0.3914, 0)))
data_test$por_cal234_var1m3_woe = ifelse( is.na(data_test$por_cal234_var1m3), -0.3914,
      ifelse(data_test$por_cal234_var1m3 %in% c("Cero por_cal234"), 0.3516,
      ifelse(data_test$por_cal234_var1m3 %in% c("Menor por_cal234","Igual por_cal234","Mayor por_cal234","Cien por_cal234"), -0.3914,0)))
# por_mora90_var1m3
data_train$por_mora90_var1m3_woe = ifelse( is.na(data_train$por_mora90_var1m3), -0.4267,
      ifelse(data_train$por_mora90_var1m3 %in% c("Cero por_mora90"), 0.3007,
      ifelse(data_train$por_mora90_var1m3 %in% c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90"), -0.4267, 0)))
data_test$por_mora90_var1m3_woe = ifelse( is.na(data_test$por_mora90_var1m3), -0.4267,
      ifelse(data_test$por_mora90_var1m3 %in% c("Cero por_mora90"), 0.3007,
      ifelse(data_test$por_mora90_var1m3 %in% c("Menor por_mora90","Igual por_mora90","Mayor por_mora90","Cien por_mora90"), -0.4267,0)))
# mora_1m_max2m12
data_train$mora_1m_max2m12_woe = ifelse( is.na(data_train$mora_1m_max2m12), -0.2509,
      ifelse(data_train$mora_1m_max2m12 %in% c("Cero mora"), 0.5624,
      ifelse(data_train$mora_1m_max2m12 %in% c("Menor mora","Igual mora","Mayor mora","Cien mora"), -0.2509, 0)))
data_test$mora_1m_max2m12_woe = ifelse( is.na(data_test$mora_1m_max2m12), -0.2509,
      ifelse(data_test$mora_1m_max2m12 %in% c("Cero mora"), 0.5624,
      ifelse(data_test$mora_1m_max2m12 %in% c("Menor mora","Igual mora","Mayor mora","Cien mora"), -0.2509,0)))
# # calificacion_max1m3_max4m12
# data_train$calificacion_max1m3_max4m12_woe = ifelse( is.na(data_train$calificacion_max1m3_max4m12), -0.5295,
#       ifelse(data_train$calificacion_max1m3_max4m12 %in% c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4"), 0.3346, 
#       ifelse(data_train$calificacion_max1m3_max4m12 %in% c("3_3","3_4","4_4"), -0.2197,
#       ifelse(data_train$calificacion_max1m3_max4m12 %in% c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2"), -0.5295, 0))))
# data_test$calificacion_max1m3_max4m12_woe = ifelse( is.na(data_test$calificacion_max1m3_max4m12), -0.5295,
#       ifelse(data_test$calificacion_max1m3_max4m12 %in% c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4"), 0.3346, 
#       ifelse(data_test$calificacion_max1m3_max4m12 %in% c("3_3","3_4","4_4"), -0.2197,
#       ifelse(data_test$calificacion_max1m3_max4m12 %in% c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2"), -0.5295,0))))
# mora_var1m3
data_train$mora_var1m3_woe = ifelse( is.na(data_train$mora_var1m3), -0.3409,
      ifelse(data_train$mora_var1m3 %in% c("Cero mora"), 0.4813,
      ifelse(data_train$mora_var1m3 %in% c("Menor mora","Igual mora","Mayor mora","Cien mora"), -0.3409, 0)))
data_test$mora_var1m3_woe = ifelse( is.na(data_test$mora_var1m3), -0.3409,
      ifelse(data_test$mora_var1m3 %in% c("Cero mora"), 0.4813,
      ifelse(data_test$mora_var1m3 %in% c("Menor mora","Igual mora","Mayor mora","Cien mora"), -0.3409,0)))
# por_mora60_var1m3
data_train$por_mora60_var1m3_woe = ifelse( is.na(data_train$por_mora60_var1m3), -0.4142,
      ifelse(data_train$por_mora60_var1m3 %in% c("Cero por_mora60"), 0.3194, 
      ifelse(data_train$por_mora60_var1m3 %in% c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60"), -0.4142, 0)))
data_test$por_mora60_var1m3_woe = ifelse( is.na(data_test$por_mora60_var1m3), -0.4142,
      ifelse(data_test$por_mora60_var1m3 %in% c("Cero por_mora60"), 0.3194, 
      ifelse(data_test$por_mora60_var1m3 %in% c("Menor por_mora60","Igual por_mora60","Mayor por_mora60","Cien por_mora60"), -0.4142,0)))
# por_mora30_var1m3
data_train$por_mora30_var1m3_woe = ifelse( is.na(data_train$por_mora30_var1m3), -0.3926,
      ifelse(data_train$por_mora30_var1m3 %in% c("Cero por_mora30"), 0.3438, 
      ifelse(data_train$por_mora30_var1m3 %in% c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30"), -0.3926, 0)))
data_test$por_mora30_var1m3_woe = ifelse( is.na(data_test$por_mora30_var1m3), -0.3926,
      ifelse(data_test$por_mora30_var1m3 %in% c("Cero por_mora30"), 0.3438, 
      ifelse(data_test$por_mora30_var1m3 %in% c("Menor por_mora30","Igual por_mora30","Mayor por_mora30","Cien por_mora30"), -0.3926,0)))
# # calificacion_1m_max2m12
# data_train$calificacion_1m_max2m12_woe = ifelse( is.na(data_train$calificacion_1m_max2m12), -0.5753,
#       ifelse(data_train$calificacion_1m_max2m12 %in% c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4"), 0.3898, 
#       ifelse(data_train$calificacion_1m_max2m12 %in% c("3_3","3_4","4_4"), -0.1432,
#       ifelse(data_train$calificacion_1m_max2m12 %in% c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2"), -0.5753, 0))))
# data_test$calificacion_1m_max2m12_woe = ifelse( is.na(data_test$calificacion_1m_max2m12), -0.5753,
#       ifelse(data_test$calificacion_1m_max2m12 %in% c("0_8","0_9","8_0","9_0","8_8","8_9","9_8","9_9","0_0","1_0","2_0","3_0","4_0","1_8","1_9","8_1","9_1","2_8","2_9","8_2","9_2","3_8","3_9","8_3","9_3","4_8","4_9","8_4","9_4"), 0.3898, 
#       ifelse(data_test$calificacion_1m_max2m12 %in% c("3_3","3_4","4_4"), -0.1432,
#       ifelse(data_test$calificacion_1m_max2m12 %in% c("2_1","3_1","4_1","4_3","0_2","1_2","0_3","1_3","2_3","0_4","1_4","2_4","0_1","1_1","2_2","3_2","4_2"), -0.5753,0))))
# por_cal1234_max1m6_max7m12
data_train$por_cal1234_max1m6_max7m12_woe = ifelse( is.na(data_train$por_cal1234_max1m6_max7m12), -0.4374,
      ifelse(data_train$por_cal1234_max1m6_max7m12 %in% c("Cero por_cal1234"), 0.5859, 
      ifelse(data_train$por_cal1234_max1m6_max7m12 %in% c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234"), -0.2037,
      ifelse(data_train$por_cal1234_max1m6_max7m12 %in% c("Mayor por_cal1234"), -0.4374, 0))))
data_test$por_cal1234_max1m6_max7m12_woe = ifelse( is.na(data_test$por_cal1234_max1m6_max7m12), -0.4374,
      ifelse(data_test$por_cal1234_max1m6_max7m12 %in% c("Cero por_cal1234"), 0.5859, 
      ifelse(data_test$por_cal1234_max1m6_max7m12 %in% c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234"), -0.2037,
      ifelse(data_test$por_cal1234_max1m6_max7m12 %in% c("Mayor por_cal1234"), -0.4374,0))))
# por_mora0_var1m3
data_train$por_mora0_var1m3_woe = ifelse( is.na(data_train$por_mora0_var1m3), -0.3410,
      ifelse(data_train$por_mora0_var1m3 %in% c("Cero por_mora0"), 0.4814, 
      ifelse(data_train$por_mora0_var1m3 %in% c("Menor por_mora0","Igual por_mora0","Mayor por_mora0","Cien por_mora0"), -0.3410, 0)))
data_test$por_mora0_var1m3_woe = ifelse( is.na(data_test$por_mora0_var1m3), -0.3410,
      ifelse(data_test$por_mora0_var1m3 %in% c("Cero por_mora0"), 0.4814, 
      ifelse(data_test$por_mora0_var1m3 %in% c("Menor por_mora0","Igual por_mora0","Mayor por_mora0","Cien por_mora0"), -0.3410, 0)))
# por_cal1234_var1m3
data_train$por_cal1234_var1m3_woe = ifelse( is.na(data_train$por_cal1234_var1m3), -0.3789,
      ifelse(data_train$por_cal1234_var1m3 %in% c("Cero por_cal1234"), 0.4710, 
      ifelse(data_train$por_cal1234_var1m3 %in% c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234","Cien por_cal1234"), -0.3789, 0)))
data_test$por_cal1234_var1m3_woe = ifelse( is.na(data_test$por_cal1234_var1m3), -0.3789,
      ifelse(data_test$por_cal1234_var1m3 %in% c("Cero por_cal1234"), 0.4710, 
      ifelse(data_test$por_cal1234_var1m3 %in% c("Menor por_cal1234","Igual por_cal1234","Mayor por_cal1234","Cien por_cal1234"), -0.3789, 0)))
#######################################################################################################################
# edad
data_train$edad_woe = ifelse( is.na(data_train$edad), -0.1537,
      ifelse(data_train$edad <= 41, -0.1537, 
      ifelse(data_train$edad <= 48, -0.0043, 
      ifelse(data_train$edad <= 55, 0.2216, 
      ifelse(data_train$edad > 55, 0.4486, 0)))))
data_test$edad_woe =  ifelse( is.na(data_test$edad), 0.9305,
      ifelse(data_test$edad <= 41, -0.1795, 
      ifelse(data_test$edad <= 48, 0.0855, 
      ifelse(data_test$edad <= 55, 0.0855, 
      ifelse(data_test$edad > 55, 0.4486, 0)))))
# por_novig_0m
data_train$por_novig_0m_woe = ifelse( is.na(data_train$por_novig_0m), 0.7047,
      ifelse(data_train$por_novig_0m <= 0, -0.0782, 
      ifelse(data_train$por_novig_0m > 0, -0.2607, 0)))
data_test$por_novig_0m_woe =  ifelse( is.na(data_test$por_novig_0m), 0.7047,
      ifelse(data_test$por_novig_0m <= 0, -0.0782, 
      ifelse(data_test$por_novig_0m > 0, -0.2607, 0)))
# # saldo_0m
# data_train$saldo_0m_woe = ifelse( is.na(data_train$saldo_0m), 0.7047,
#       ifelse(data_train$saldo_0m <= 10000, 0.0717, 
#       ifelse(data_train$saldo_0m > 10000, -0.2676, 0)))
# data_test$saldo_0m_woe =  ifelse( is.na(data_test$saldo_0m), 0.7047,
#       ifelse(data_test$saldo_0m <= 10000, 0.0717, 
#       ifelse(data_test$saldo_0m > 10000, -0.2676, 0)))
# por_uso_linea_0m
data_train$por_uso_linea_0m_woe = ifelse( is.na(data_train$por_uso_linea_0m), -0.1725,
      ifelse(data_train$por_uso_linea_0m <= 0.8, 0.8050, 
      ifelse(data_train$por_uso_linea_0m <= 0.98, 0.3613, 
      ifelse(data_train$por_uso_linea_0m > 0.98, -0.0453, 0))))
data_test$por_uso_linea_0m_woe =  ifelse( is.na(data_test$por_uso_linea_0m), -0.1725,
      ifelse(data_test$por_uso_linea_0m <= 0.8, 0.8050, 
      ifelse(data_test$por_uso_linea_0m <= 0.98, 0.3613, 
      ifelse(data_test$por_uso_linea_0m > 0.98, -0.0453, 0))))
# linea_total_0m
data_train$linea_total_0m_woe = ifelse( is.na(data_train$linea_total_0m), -0.1725,
      ifelse(data_train$linea_total_0m <= 2150, 0.2561, 
      ifelse(data_train$linea_total_0m <= 8000, 0.6849, 
      ifelse(data_train$linea_total_0m > 8000, 0.9790, 0))))
data_test$linea_total_0m_woe =  ifelse( is.na(data_test$linea_total_0m), -0.1725,
      ifelse(data_test$linea_total_0m <= 2150, 0.2561, 
      ifelse(data_test$linea_total_0m <= 8000, 0.6849, 
      ifelse(data_test$linea_total_0m > 8000, 0.9790, 0))))
# mora_0m
data_train$mora_0m_woe = ifelse( is.na(data_train$mora_0m), 0.7047,
      ifelse(data_train$mora_0m <= 0, 0.3482, 
      ifelse(data_train$mora_0m <= 30, -0.1605, 
      ifelse(data_train$mora_0m > 30, -0.4068, 0))))
data_test$mora_0m_woe =  ifelse( is.na(data_test$mora_0m), 0.7047,
      ifelse(data_test$mora_0m <= 0, 0.3482, 
      ifelse(data_test$mora_0m <= 30, -0.1605, 
      ifelse(data_test$mora_0m > 30, -0.4068, 0))))
# rec_mora0_1m12
data_train$rec_mora0_1m12_woe = ifelse( is.na(data_train$rec_mora0_1m12), 0.5624,
      ifelse(data_train$rec_mora0_1m12 <= 1, -0.3623, 
      ifelse(data_train$rec_mora0_1m12 <= 5, 0.0346, 
      ifelse(data_train$rec_mora0_1m12 > 5, 0.3343, 0))))
data_test$rec_mora0_1m12_woe =  ifelse( is.na(data_test$rec_mora0_1m12), 0.5624,
      ifelse(data_test$rec_mora0_1m12 <= 1, -0.3623, 
      ifelse(data_test$rec_mora0_1m12 <= 5, 0.0346, 
      ifelse(data_test$rec_mora0_1m12 > 5, 0.3343, 0))))
# saldo_cal1234_max1m6
data_train$saldo_cal1234_max1m6_woe = ifelse( is.na(data_train$saldo_cal1234_max1m6), 0.2909,
      ifelse(data_train$saldo_cal1234_max1m6 <= 0, 0.5989, 
      ifelse(data_train$saldo_cal1234_max1m6 <= 8200, -0.1434, 
      ifelse(data_train$saldo_cal1234_max1m6 > 8200, -0.7207, 0))))
data_test$saldo_cal1234_max1m6_woe =  ifelse( is.na(data_test$saldo_cal1234_max1m6), 0.2909,
      ifelse(data_test$saldo_cal1234_max1m6 <= 0, 0.5989, 
      ifelse(data_test$saldo_cal1234_max1m6 <= 8200, -0.1434, 
      ifelse(data_test$saldo_cal1234_max1m6 > 8200, -0.7207, 0))))
# por_cal1234_max1m6
data_train$por_cal1234_max1m6_woe = ifelse( is.na(data_train$por_cal1234_max1m6), 0.6532,
      ifelse(data_train$por_cal1234_max1m6 <= 0, 0.4977, 
      ifelse(data_train$por_cal1234_max1m6 <= 50, -0.1687, 
      ifelse(data_train$por_cal1234_max1m6 > 50, -0.4202, 0))))
data_test$por_cal1234_max1m6_woe =  ifelse( is.na(data_test$por_cal1234_max1m6), 0.6532,
      ifelse(data_test$por_cal1234_max1m6 <= 0, 0.4977, 
      ifelse(data_test$por_cal1234_max1m6 <= 50, -0.1687, 
      ifelse(data_test$por_cal1234_max1m6 > 50, -0.4202, 0))))
# saldo_int
data_train$saldo_int_woe = ifelse( is.na(data_train$saldo_int), -0.4074,
      ifelse(data_train$saldo_int <= 275, 0.3903, 
      ifelse(data_train$saldo_int <= 600, 0.2417, 
      ifelse(data_train$saldo_int > 600, -0.4074, 0))))
data_test$saldo_int_woe =  ifelse( is.na(data_test$saldo_int), -0.4074,
      ifelse(data_test$saldo_int <= 275, 0.3903, 
      ifelse(data_test$saldo_int <= 600, 0.2417, 
      ifelse(data_test$saldo_int > 600, -0.4074, 0))))
# calificacion_conalin
data_train$calificacion_conalin_woe = ifelse( is.na(data_train$calificacion_conalin), -1.0854,
      ifelse(data_train$calificacion_conalin %in% c(0), 0.3763, 
      ifelse(data_train$calificacion_conalin %in% c(1, 2, 3, 4), -1.0854, 0)))
data_test$calificacion_conalin_woe = ifelse( is.na(data_test$calificacion_conalin), -1.0854,
      ifelse(data_test$calificacion_conalin %in% c(0), 0.3763, 
      ifelse(data_test$calificacion_conalin %in% c(1, 2, 3, 4), -1.0854, 0)))
# calificacion_sinalin
data_train$calificacion_sinalin_woe = ifelse( is.na(data_train$calificacion_sinalin), -1.2327,
      ifelse(data_train$calificacion_sinalin %in% c(0), 0.3324, 
      ifelse(data_train$calificacion_sinalin %in% c(1, 2, 3, 4), -1.2327, 0)))
data_test$calificacion_sinalin_woe = ifelse( is.na(data_test$calificacion_sinalin), -1.2327,
      ifelse(data_test$calificacion_sinalin %in% c(0), 0.3324, 
      ifelse(data_test$calificacion_sinalin %in% c(1, 2, 3, 4), -1.2327, 0)))
# saldo_mora
data_train$saldo_mora_woe = ifelse( is.na(data_train$saldo_mora), -1.5746,
      ifelse(data_train$saldo_mora <= 0, 0.3959, 
      ifelse(data_train$saldo_mora <= 4, -0.5195, 
      ifelse(data_train$saldo_mora > 4, -1.5746, 0))))
data_test$saldo_mora_woe =  ifelse( is.na(data_test$saldo_mora), -1.5746,
      ifelse(data_test$saldo_mora <= 0, 0.3959, 
      ifelse(data_test$saldo_mora <= 4, -0.5195, 
      ifelse(data_test$saldo_mora > 4, -1.5746, 0))))
```


```{r}
###################################
######      Correlacion      ######
###################################

```

```{r}
# Train y Test para los WOE's

n = length(colnames(data_train))
train_woe = data_train[,c(8, 11, 374:n)] # agregamos edad de la posicion 11
test_woe = data_test[,c(8, 11, 374:n)]
# colnames(data)
# dim(train_woe)
# dim(test_woe)

# Correlacion de variables originales
var_orig = c()
n = length(train_woe)
for (i in 3:n) {
  var_orig = append( var_orig, 
                     substr( 
                            colnames(train_woe)[i], 1, ( nchar( colnames(train_woe)[i] ) - 4 )
                     )
              )
}

cor(data_train[ var_orig[var_orig %in% var_num] ], use='pairwise.complete.obs')

# Correlaicon de variables woe
cor_woe = cor(train_woe[2:length(train_woe)],use='pairwise.complete.obs')
# write.table(cor_woe,paste(readline(),"cor_woe.csv",sep="\\"),sep=',')
# write.csv(cor_woe,"D:\\GIAP\\Tareas\\Behavior\\calibracion\\202104\\analisis\\cor_woe.csv", row.names = T)

```

```{r}
summary(train_woe)
# summary(test_woe)
```

```{r}
################################
######      stepWise      ######
################################


start_time = as.numeric(Sys.time())

formula_logit = as.formula(malo ~ .)

modelo <- glm(formula_logit, data=train_woe, family = "binomial")

step_modelo <- stepAIC(modelo, direction = "both", trace = FALSE)

summary(step_modelo)

time_process('Stepwise', start_time)


```

```{r}
########## Gini
z0_train=predict(modelo,data=train_woe)
p0_train=1/(1+exp(-z0_train))
z0_test=predict(modelo,newdata=test_woe)
p0_test=1/(1+exp(-z0_test))

writeLines("Tasa de malos:")
mean(data_train$tm)
mean(data_test$tm)
writeLines("\nProbabilidad estimada:")
mean(p0_train)
mean(p0_test)

gini0_tr=rcorr.cens(p0_train,data_train$tm)[2]
gini0_ts=rcorr.cens(p0_test,data_test$tm)[2]
roc0_tr=(gini0_tr+1)/2;roc0_ts=(gini0_ts+1)/2

writeLines("\nGini y ROC:")
tb=cbind(c(gini0_tr,roc0_tr),c(gini0_ts,roc0_ts))
colnames(tb)=c("TRAIN","TEST");row.names(tb)=c("GINI","ROC");tb

```

```{r}
# Variables candidatas

biv$name_woe = c()

for (i in biv$name) {
  biv$name_woe = append(biv$name_woe, paste(i,'_woe',sep = '') )
}

# Variables
# colnames(train_woe)
for (i in colnames(train_woe)) { print(paste("+",i))}

```

```{r}
# Imputacion de la edad
round( mean( train_woe$edad, na.rm=TRUE ))
train_woe[is.na(train_woe$edad), 'edad'] = 42 # valor redondeado
```

```{r}
######### MODELO 1

formula_logit1 = as.formula(malo ~
# -1
+ linea_activa_max1m6_max7m12_woe
+ por_cal0_min1m6_min7m12_woe #
+ por_novig_0m_woe
+ por_uso_linea_0m_woe
+ linea_total_0m_woe
+ saldo_cal1234_max1m6_woe
+ saldo_int_woe
+ calificacion_conalin_woe
# + calificacion_sinalin_woe # calificacion interna
+ saldo_mora_woe

+ edad
# + edad_woe

# + por_novig_1m_max2m12_woe #
# + linea_activa_var1m3_woe
# + por_mora_0_1m_min2m12_woe
# + por_vig_1m_min2m12_woe
# + por_cal0_var1m3_woe
# + por_castigo_var1m3_woe
# + por_mora0_max1m6_max7m12_woe
# + por_mora90_1m_max2m12_woe
# + por_mora60_1m_max2m12_woe
# + por_cal4_var1m3_woe
# + por_cal34_var1m3_woe
# + por_cal234_var1m3_woe
# + mora_1m_max2m12_woe
# + por_mora60_var1m3_woe
# + por_mora30_var1m3_woe
# + por_cal1234_max1m6_max7m12_woe #
# + por_mora0_var1m3_woe
# + por_cal1234_var1m3_woe
# + mora_0m_woe
# + rec_mora0_1m12_woe
# + por_cal1234_max1m6_woe

)

modelo1 <- glm(formula_logit1, data=train_woe, family = "binomial")

summary(modelo1)
# model_wald(modelo1,train_woe)
# model_wald(modelo1,train_woe,'cor')
# model_wald(modelo1,train_woe,'cor')[,5:dim(model_wald(modelo1,train_woe,'cor'))[2]]
```

```{r}
var_iv = biv
tb_final = model_wald(modelo1,train_woe)
n = length( rownames( tb_final ) )
r = length(var_iv$name_woe)

for (i in 2:n) {
  
  for (j in 1:r) {
    
    if( rownames(tb_final)[i] == var_iv$name_woe[j]  ) { 
      
      tb_final[i, 'IV_Tr'] =  round( var_iv$iv_tr[j] * 100, 2 )
      tb_final[i, 'IV_Ts'] =  round( var_iv$iv_ts[j] * 100, 2 )
      
    }
    
  }
  
}

tb_final
```


```{r}
########## Gini 01

start_time = as.numeric(Sys.time())

z1_train=predict(modelo1,data=train_woe)
p1_train=1/(1+exp(-z1_train))
z1_test=predict(modelo1,newdata=test_woe)
p1_test=1/(1+exp(-z1_test))

writeLines("Tasa de malos:")
mean(data_train$tm)
mean(data_test$tm)
writeLines("\nProbabilidad estimada:")
mean(p1_train)
mean(p1_test)

gini1_tr=rcorr.cens(p1_train,data_train$tm)[2]
gini1_ts=rcorr.cens(p1_test,data_test$tm)[2]
roc1_tr=(gini1_tr+1)/2;roc1_ts=(gini1_ts+1)/2

writeLines("\nGini y ROC:")
tb=cbind(c(gini1_tr,roc1_tr),c(gini1_ts,roc1_ts))
colnames(tb)=c("TRAIN","TEST");row.names(tb)=c("GINI","ROC"); round(tb*100,2)

time_process('Gini del modelo', start_time)


```

```{r}
# Correlacion modelo 01

# variables woe del modelo
var_woe = rownames(summary(modelo1)$coefficients)
n = length(var_woe)
var_woe = var_woe[2:n]

cor( train_woe[ var_woe ] )

# variables numericas originales del modelo

var = c()
for (i in var_woe) { var = append( var, substr( i, 1, nchar(i) - 4 ) ) }
cor( data_train[ c(intersect(var_num, var), 'edad' ) ], use='pairwise.complete.obs' )
```

```{r}
# Woes a toda la data
n = length(var)
var = c( var[1:(n-1)], 'edad')
eje = c('stock', 'cod', 'cv', 'co', 'expediente', 'identificacion', 'malo', 'indeterminado', 'insuficiente', 'filtro')

data_final = data[c(eje,var)]
# woes

# linea_activa_max1m6_max7m12
data_final$linea_activa_max1m6_max7m12_woe = ifelse( is.na(data_final$linea_activa_max1m6_max7m12), -0.1517,
      ifelse(data_final$linea_activa_max1m6_max7m12 %in% c("Cero linea_activa"), -0.1517,
      ifelse(data_final$linea_activa_max1m6_max7m12 %in% c("Menor linea_activa","Igual linea_activa","Mayor linea_activa"), 0.2860, 0)))

# por_cal0_min1m6_min7m12
data_final$por_cal0_min1m6_min7m12_woe = ifelse( is.na(data_final$por_cal0_min1m6_min7m12), -0.1244,
      ifelse(data_final$por_cal0_min1m6_min7m12 %in% c("Cero por_cal0","Menor por_cal0","Igual por_cal0","Mayor por_cal0"), -0.1244,
      ifelse(data_final$por_cal0_min1m6_min7m12 %in% c("Cien por_cal0"), 0.6309, 0)))

# por_novig_0m
data_final$por_novig_0m_woe = ifelse( is.na(data_final$por_novig_0m), 0.7047,
      ifelse(data_final$por_novig_0m <= 0, -0.0782, 
      ifelse(data_final$por_novig_0m > 0, -0.2607, 0)))

# por_uso_linea_0m
data_final$por_uso_linea_0m_woe = ifelse( is.na(data_final$por_uso_linea_0m), -0.1725,
      ifelse(data_final$por_uso_linea_0m <= 0.8, 0.8050, 
      ifelse(data_final$por_uso_linea_0m <= 0.98, 0.3613, 
      ifelse(data_final$por_uso_linea_0m > 0.98, -0.0453, 0))))

# linea_total_0m
data_final$linea_total_0m_woe = ifelse( is.na(data_final$linea_total_0m), -0.1725,
      ifelse(data_final$linea_total_0m <= 2150, 0.2561, 
      ifelse(data_final$linea_total_0m <= 8000, 0.6849, 
      ifelse(data_final$linea_total_0m > 8000, 0.9790, 0))))

# saldo_cal1234_max1m6
data_final$saldo_cal1234_max1m6_woe = ifelse( is.na(data_final$saldo_cal1234_max1m6), 0.2909,
      ifelse(data_final$saldo_cal1234_max1m6 <= 0, 0.5989, 
      ifelse(data_final$saldo_cal1234_max1m6 <= 8200, -0.1434, 
      ifelse(data_final$saldo_cal1234_max1m6 > 8200, -0.7207, 0))))

# saldo_int
data_final$saldo_int_woe = ifelse( is.na(data_final$saldo_int), -0.4074,
      ifelse(data_final$saldo_int <= 275, 0.3903, 
      ifelse(data_final$saldo_int <= 600, 0.2417, 
      ifelse(data_final$saldo_int > 600, -0.4074, 0))))

# calificacion_conalin
data_final$calificacion_conalin_woe = ifelse( is.na(data_final$calificacion_conalin), -1.0854,
      ifelse(data_final$calificacion_conalin %in% c(0), 0.3763, 
      ifelse(data_final$calificacion_conalin %in% c(1, 2, 3, 4), -1.0854, 0)))

# # calificacion_sinalin
# data_final$calificacion_sinalin_woe = ifelse( is.na(data_final$calificacion_sinalin), -1.2327,
#       ifelse(data_final$calificacion_sinalin %in% c(0), 0.3324, 
#       ifelse(data_final$calificacion_sinalin %in% c(1, 2, 3, 4), -1.2327, 0)))

# saldo_mora
data_final$saldo_mora_woe = ifelse( is.na(data_final$saldo_mora), -1.5746,
      ifelse(data_final$saldo_mora <= 0, 0.3959, 
      ifelse(data_final$saldo_mora <= 4, -0.5195, 
      ifelse(data_final$saldo_mora > 4, -1.5746, 0))))

data_final[is.na(data_final$edad), 'edad'] = 42

summary(data_final)
```


```{r}
# Export PD
coef = as.data.frame(summary(modelo1)$coefficients)$Estimate
# coef = c(-0.54183397, -0.45821499, -0.06524285, -0.85892706, -0.31485138, -0.44120678, -0.65216716, -0.50743103, -0.21638489, -0.16944101, -0.54392677, -0.01485572)
n = length(var)

v = round(coef[1],6)
for (i in 1:n) {
  # i = 2
  v = paste(v, if (coef[i+1] >= 0) { paste('+', round(coef[i+1],6), '*data_final$', var[i], '_woe', sep = '') } 
                else { paste(round(coef[i+1],6), '*data_final$', var[i], '_woe', sep = '') } )

}
v
data_final$z = -0.541601 -0.477806*data_final$linea_activa_max1m6_max7m12_woe -0.068373*data_final$por_cal0_min1m6_min7m12_woe -0.85531*data_final$por_novig_0m_woe -0.30635*data_final$por_uso_linea_0m_woe -0.439359*data_final$linea_total_0m_woe -0.638383*data_final$saldo_cal1234_max1m6_woe -0.525021*data_final$saldo_int_woe -0.333621*data_final$calificacion_conalin_woe -0.589714*data_final$saldo_mora_woe -0.014868*data_final$edad # corregimos a edad porque no es woe

data_final$pd = 1/(1+exp(-data_final$z))

summary(data_final$pd)

# write.table(data_final, paste(readline(),"df_pd.csv",sep="\\"),sep=',')
```

```{r}
################### Pruebas de significancia (En base a train)

# Significancia
# deviance
modelo1b=glm(malo~1.,family = binomial,data=data_train)
anova(modelo1)
anova(modelo1b,modelo1, test = 'Chisq')
```

```{r}
################### Pruebas de significancia
# Wald TEst
n = length(var_woe) - 1
wald.test(b = coef(modelo1), Sigma = vcov(modelo1), Terms = 2:n) ##Terms = 2:(cantidad de variables)
```

```{r}
################### Bondad de Ajuste
#Hosmer-Lemeshow
# HLgof.test(fit = fitted(modelo5), obs =df_conversion_train$Malo_prima)

h1=hoslem.test(data_train$tm, fitted(modelo1), g=10)
cbind(h1$observed,h1$expected)

hosmerlem <- function (y, yhat, g = 10)
{
  cutyhat <- cut(yhat, 
                 breaks = quantile(yhat, probs = seq(0, 1, 1/g)), 
                 include.lowest = T
                 )
  obs     <- xtabs( cbind(1 - y, y) ~ cutyhat )
  expect  <- xtabs( cbind(1 - yhat, yhat) ~ cutyhat )
  chisq   <- sum( (obs - expect) ^2/expect )
  P       <- 1 - pchisq(chisq, g-2)
  c  ("X^2" = chisq, Df = g-2, "P(>Chi)" = P)
}

hosmerlem(y=data_train$tm, yhat=fitted(modelo1))
```

```{r}
####################################
############ OODS RIESGOS (En base a Test)
####################################

## Modelo 01

cuts = c(
  # 0.05,
  # 0.1,
  # 0.15,
  # 0.2,
  0.25,
  # 0.3,
  # 0.35,
  # 0.4,
  # 0.45,
  # 0.5,
  # 0.55,
  0.6,
  # 0.65,
  # 0.7,
  # 0.75,
  0.8,
  # 0.85,
  # 0.9,
  0.95
)

p1_test_biv = cut( p1_test, breaks = c( -Inf, quantile(p1_test, cuts, na.rm = T), Inf ) )
table(p1_test_biv,data_test$malo, useNA = "ifany")

for ( i in c(cuts, 1) ) { print( paste( i, round( quantile(p1_test, i, na.rm = T), 4 )) ) }

```

```{r}
################# MANUAL
```

```{r}
####### Tasa de Malos por Cosecha
tabla_dm=aggregate(tm ~ stock, data=data,mean)

####### Grafico de Tasa de Malos por Cosecha
####### analisis total: base train y test

######## Total

plot(tabla_dm$tm, type = "l", xlab = "Stock", xaxt = "n", ylab = "TM", ylim = c(0,1), main = "Tasa de Malos por Stock")
axis(1, at = 1:dim(tabla_dm)[1], lab = tabla_dm$stock, cex.axis = 0.5)
```

```{r}
#### variables:

# Demograficas
## Edad
### Input
data_train[ is.na( data_train$edad ),'edad'] = 42
manual_numeric(var = 'edad', title = 'Edad', color = 'skyblue', dec = 2)

# Internas
## saldo en Intereses
manual_numeric(var = 'saldo_int', title = 'Saldo en Intereses', color = 'skyblue')

## Calificacion con alineamiento
A = c(0)
B = c(1,2,3,4)
manual_categorica(var = 'calificacion_conalin',bin = list(A,B))

## Calificacion sin alineamiento
A = c(0)
B = c(1,2,3,4)
manual_categorica(var = 'calificacion_sinalin',bin = list(A,B))

# Sistema Financiero
## Linea activa maxima 1m6 vs maxima 7m12
A = c('Cero linea_activa')
B = c('Menor linea_activa', 'Igual linea_activa', 'Mayor linea_activa')
manual_categorica(var = 'linea_activa_max1m6_max7m12',bin = list(A,B))

## Porcentaje de calificacion normal minima 1m6 vs minima 7m12
A = c('Cero por_cal0', 'Menor por_cal0', 'Igual por_cal0', 'Mayor por_cal0')
B = c('Cien por_cal0')
manual_categorica(var = 'por_cal0_min1m6_min7m12',bin = list(A,B))

## Porcentaje no vigente
manual_numeric(var = 'por_novig_0m', title = 'Porcentaje No Vigente', color = 'skyblue', dec = 2)

## Porcentaje de linea usada
manual_numeric(var = 'por_uso_linea_0m', title = 'Porcentaje de linea usada', color = 'skyblue', dec = 2)

## Linea total
manual_numeric(var = 'linea_total_0m', title = 'Linea Total', color = 'skyblue', dec = 2)

## Saldo con calificacion Mayor a normal maximo 1m6
manual_numeric(var = 'saldo_cal1234_max1m6', title = 'Saldo maximo con calificacion 1,2,3,4 - 1m6', color = 'skyblue', dec = 2)

## Saldo en mora
manual_numeric(var = 'saldo_mora', title = 'Saldo mora', color = 'skyblue', dec = 2)







```



